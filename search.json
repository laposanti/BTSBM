[{"path":"https://laposanti.github.io/BTSBM/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Lapo Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://laposanti.github.io/BTSBM/articles/getting-started.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Getting started with BTSBM","text":"vignette replicates spirit larger simulation pipeline, focuses single value K single dataset keep things simple fast -simulate sparse paired-comparison topology, -simulate latent blocks block rates, -generate win counts wijw_{ij} -run clustered Gibbs sampler (gibbs_bt_sbm), -relabel summarize (inference_helper), -compare inferred partition truth via VI distance. Run clustered Gibbs sampler (short chain) Relabel summarize  Compare partitions truth (VI distance) compute VI distances minVI Binder partitions true labels z_star. Plot reordered adjacency matrix  Plot assignment uncertainty  Plot lambda uncertainty","code":"set.seed(12) # 2.1 Sparse-ish match topology sample_Nij <- function(n_players, mean_matches = 10, p_edge = 0.5) {   N <- matrix(0L, n_players, n_players)   pairs <- utils::combn(n_players, 2)   m     <- ncol(pairs)   keep  <- which(runif(m) < p_edge)   for (k in keep) {     i <- pairs[1, k]; j <- pairs[2, k]     n_ij <- rpois(1, mean_matches)     if (n_ij > 0L) { N[i, j] <- N[j, i] <- n_ij }   }   diag(N) <- 0L   N }  n    <- 150 N_sim <- sample_Nij(n, mean_matches = 5, p_edge = 0.5) K=4 x_star <- rep(1:K,length.out=n)       lambda_to_theta = function(lambda){   outer(lambda, lambda, function(a, b) a / (a + b)) }  make_lambda_geometric <- function(K, base=1, ratio=2.3) base * ratio^(0:(K-1)) lambda_star <- make_lambda_geometric(K, base=0.08, ratio=2.3)  theta_star  <- lambda_to_theta(rev(lambda_star)) theta_star #>            [,1]      [,2]      [,3]      [,4] #> [1,] 0.50000000 0.6969697 0.8410175 0.9240526 #> [2,] 0.30303030 0.5000000 0.6969697 0.8410175 #> [3,] 0.15898251 0.3030303 0.5000000 0.6969697 #> [4,] 0.07594744 0.1589825 0.3030303 0.5000000 # ---- generate outcome counts ---- w_ij <- matrix(0L, n, n) idx  <- which(upper.tri(N_sim) & N_sim > 0L, arr.ind = TRUE) for (krow in seq_len(nrow(idx))) {   i <- idx[krow, 1]; j <- idx[krow, 2]   nij <- N_sim[i, j]   pij <- theta_star[x_star[i], x_star[j]]   wij <- rbinom(1, nij, pij)   w_ij[i, j] <- wij   w_ij[j, i] <- nij - wij } n_iter = 4000 burnin = 1000  out <- BTSBM::gibbs_bt_sbm(   w_ij   = w_ij,   a = 4,   prior  = \"GN\",       # \"DP\", \"PY\", \"DM\", or \"GN\"   gamma_GN =  0.8,   n_iter = n_iter, burnin = burnin,   verbose = T ) #> iter 1000 occupied = 4  #> iter 2000 occupied = 4  #> iter 3000 occupied = 4  #> iter 4000 occupied = 4 library(dplyr) library(ggplot2)  post <- BTSBM::relabel_by_lambda(out$x_samples, out$lambda_samples)   as.data.frame(table(post$n_clusters_each_iter[(burnin + 1):n_iter])) %>%   rename(K = Var1, count = Freq) %>%   mutate(     K = as.integer(as.character(K)),     prob = count / sum(count)   ) %>%   ggplot(aes(x = K, y = prob)) +   geom_col() +   theme_minimal() +   labs(     x = \"K\",     y = expression(Pr(K==k ~ \"|\" ~ W)),     title = \"Posterior distribution of K\"   ) point_estimate_VI = post$partition_binder mcclust::arandi(point_estimate_VI, x_star) #> [1] 1 plot_block_adjacency(fit = post,                      w_ij = w_ij) plot_assignment_probabilities(fit = post, w_ij = w_ij) plot_lambda_uncertainty(fit = post, w_ij = w_ij, clean_fun = clean_players_names)"},{"path":"https://laposanti.github.io/BTSBM/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lapo Santi. Author, maintainer.","code":""},{"path":"https://laposanti.github.io/BTSBM/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Santi L (2025). BTSBM: Bayesian Bradley–Terry Stochastic Block Models Paired Comparison Data. R package version 0.1.0, https://github.com/laposanti/BTSBM.","code":"@Manual{,   title = {BTSBM: Bayesian Bradley–Terry Stochastic Block Models for Paired Comparison Data},   author = {Lapo Santi},   year = {2025},   note = {R package version 0.1.0},   url = {https://github.com/laposanti/BTSBM}, }"},{"path":"https://laposanti.github.io/BTSBM/index.html","id":"description","dir":"","previous_headings":"","what":"Bradley–Terry SBM","title":"Bradley–Terry SBM","text":"Implements Bayesian inference Bradley–Terry models Stochastic Block Model (SBM) prior players items compared. Includes Gibbs-type MCMC samplers, posterior relabeling, model diagnostics, visualization utilities inferred skill clusters block interaction strengths. Suitable applications sports analytics, psychometrics, ranking problems latent group structure.","code":""},{"path":"https://laposanti.github.io/BTSBM/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Bradley–Terry SBM","text":"Install development version GitHub:","code":"# install.packages(\"devtools\") devtools::install_github(\"laposanti/BTSBM\")  Example library(BTSBM)  set.seed(123) K <- 6 n <- matrix(0, K, K) n[upper.tri(n)] <- sample(0:5, sum(upper.tri(n)), TRUE) n <- n + t(n); diag(n) <- 0  w <- matrix(0, K, K) w[upper.tri(w)] <- rbinom(sum(upper.tri(w)), n[upper.tri(n)], 0.5) w <- w + t(n - w); diag(w) <- 0  fit <- gibbs_bt_sbm(w, n, a = 1, b = 1, prior = \"GN\",                     n_iter = 500, burnin = 250, verbose = FALSE)"},{"path":"https://laposanti.github.io/BTSBM/reference/ATP_2000_2022.html","id":null,"dir":"Reference","previous_headings":"","what":"ATP Paired-Comparison Panels, 2000–2022 — ATP_2000_2022","title":"ATP Paired-Comparison Panels, 2000–2022 — ATP_2000_2022","text":"yearly panel head--head counts top 105 ATP players, suitable Bradley–Terry/Stochastic Block Model analyses. season, data include () number wins player \\(\\) player \\(j\\) (ii) number matches played \\(\\) \\(j\\), along per-season player metadata tibble.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/ATP_2000_2022.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ATP Paired-Comparison Panels, 2000–2022 — ATP_2000_2022","text":"","code":"ATP_2000_2022"},{"path":"https://laposanti.github.io/BTSBM/reference/ATP_2000_2022.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ATP Paired-Comparison Panels, 2000–2022 — ATP_2000_2022","text":"named list length 23, elements \"2000\", \"2001\", …, \"2022\". yearly element list length 3: Y_ij numeric matrix \\(105 \\times 105\\). Entry Y_ij[, j] count matches player \\(\\) defeated player \\(j\\) calendar year (nonnegative integer; diagonal zero). N_ij numeric matrix \\(105 \\times 105\\). Entry N_ij[, j] total number matches players \\(\\) \\(j\\) year (nonnegative integer; symmetric construction; diagonal zero). players_df tibble/data frame 105 rows 7 columns describing player index used matrices year: player Integer player identifier (row/column index used Y_ij N_ij). worst_rank Worst (numerically largest) ATP ranking attained player year. median_rank Median ATP ranking across player's ranking snapshots year. last_rank ATP ranking last snapshot available year (e.g., year-end ranking). age_year Approximate age (years) season (e.g., mid-season). ht_year Player height centimeters (season-level value). player_slug Character identifier (URL-safe underscored name) player.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/ATP_2000_2022.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"ATP Paired-Comparison Panels, 2000–2022 — ATP_2000_2022","text":"Aggregated package author public ATP results (e.g., tennis\\_atp datasets Jeff Sackmann) internal preprocessing. See package vignette provenance cleaning steps.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/ATP_2000_2022.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ATP Paired-Comparison Panels, 2000–2022 — ATP_2000_2022","text":"player ordering players_df defines row/column indexing Y_ij N_ij corresponding year. diagonal entries matrices zero definition. typical usage Bradley–Terry-type models, one can treat Y_ij[, j] number “successes” \\(\\) vs. \\(j\\), binomial denominator N_ij[, j].","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/ATP_2000_2022.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"ATP Paired-Comparison Panels, 2000–2022 — ATP_2000_2022","text":"matrices may sparse many player pairs. Ensure model code guards divisions zero N_ij[, j] = 0.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/ATP_2000_2022.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ATP Paired-Comparison Panels, 2000–2022 — ATP_2000_2022","text":"","code":"if (FALSE) { # \\dontrun{ data(ATP_2000_2022) names(ATP_2000_2022) year <- \"2000\" str(ATP_2000_2022[[year]])  # Player i's total wins that year: i <- 1 sum(ATP_2000_2022[[year]]$Y_ij[i, ], na.rm = TRUE)  # Total matches between i and j: j <- 2 ATP_2000_2022[[year]]$N_ij[i, j]  # Join player metadata to indices used in the matrices: head(ATP_2000_2022[[year]]$players_df) } # }"},{"path":"https://laposanti.github.io/BTSBM/reference/HGnedin.html","id":null,"dir":"Reference","previous_headings":"","what":"Gnedin prior normalization weight H(V,h) — HGnedin","title":"Gnedin prior normalization weight H(V,h) — HGnedin","text":"Computes unnormalized mass function term used Gnedin-type priors.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/HGnedin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gnedin prior normalization weight H(V,h) — HGnedin","text":"","code":"HGnedin(V, h, gamma = 0.5)"},{"path":"https://laposanti.github.io/BTSBM/reference/HGnedin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gnedin prior normalization weight H(V,h) — HGnedin","text":"V integer(1) total items. h integer vector block counts. gamma numeric(1) parameter \\(\\gamma > 0\\).","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/HGnedin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gnedin prior normalization weight H(V,h) — HGnedin","text":"Numeric vector weights \\(H(V,h)\\).","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/clean_players_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Format player names as ","title":"Format player names as ","text":"Format player names \"Surname F.\"","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/clean_players_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format player names as ","text":"","code":"clean_players_names(name)"},{"path":"https://laposanti.github.io/BTSBM/reference/clean_players_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format player names as ","text":"name character scalar vector (e.g., \"Roger Federer\").","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/clean_players_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format player names as ","text":"Character vector formatted names (e.g., \"Federer R.\").","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/clean_players_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format player names as ","text":"","code":"clean_players_names(c(\"Roger Federer\", \"Nadal\")) #> [1] \"Federer R .\" \"Nadal\""},{"path":"https://laposanti.github.io/BTSBM/reference/compare_bt_models_loo.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare BT models with Pareto-smoothed importance sampling LOO — compare_bt_models_loo","title":"Compare BT models with Pareto-smoothed importance sampling LOO — compare_bt_models_loo","text":"Convenience wrapper around loo comparing two log-likelihood matrices (simple vs clustered BT).","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/compare_bt_models_loo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare BT models with Pareto-smoothed importance sampling LOO — compare_bt_models_loo","text":"","code":"compare_bt_models_loo(simple_llo, cluster_llo)  compare_bt_models_loo(simple_llo, cluster_llo)"},{"path":"https://laposanti.github.io/BTSBM/reference/compare_bt_models_loo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare BT models with Pareto-smoothed importance sampling LOO — compare_bt_models_loo","text":"simple_llo list returned make_bt_simple_loo(). cluster_llo list returned make_bt_cluster_loo().","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/compare_bt_models_loo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare BT models with Pareto-smoothed importance sampling LOO — compare_bt_models_loo","text":"list : simple — loo object simple BT. cluster — loo object clustered BT–SBM. comparison — result loo::compare_models(). list : simple — loo object simple BT. cluster — loo object clustered BT–SBM. comparison — result loo::compare().","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/dot-new_cluster_integral_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Gamma-Poisson integrated log-likelihood (new block) — .new_cluster_integral_log","title":"Gamma-Poisson integrated log-likelihood (new block) — .new_cluster_integral_log","text":"Gamma-Poisson integrated log-likelihood (new block)","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/dot-new_cluster_integral_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gamma-Poisson integrated log-likelihood (new block) — .new_cluster_integral_log","text":"","code":".new_cluster_integral_log(wi, Zi, a_now, b_now)"},{"path":"https://laposanti.github.io/BTSBM/reference/dot-new_cluster_integral_log_anchored.html","id":null,"dir":"Reference","previous_headings":"","what":"Anchored version of the integrated log-score (drop a-only constant) — .new_cluster_integral_log_anchored","title":"Anchored version of the integrated log-score (drop a-only constant) — .new_cluster_integral_log_anchored","text":"Anchored version integrated log-score (drop -constant)","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/dot-new_cluster_integral_log_anchored.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Anchored version of the integrated log-score (drop a-only constant) — .new_cluster_integral_log_anchored","text":"","code":".new_cluster_integral_log_anchored(wi, Zi, a_now, b_now)"},{"path":"https://laposanti.github.io/BTSBM/reference/dot-sample_from_logweights.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample index from log-weights — .sample_from_logweights","title":"Sample index from log-weights — .sample_from_logweights","text":"Sample index log-weights","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/dot-sample_from_logweights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample index from log-weights — .sample_from_logweights","text":"","code":".sample_from_logweights(logw)"},{"path":"https://laposanti.github.io/BTSBM/reference/dot-slice_on_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Slice sampler on log-scale (internal) — .slice_on_log","title":"Slice sampler on log-scale (internal) — .slice_on_log","text":"Univariate slice sampling \\(\\log \\). Used internally hyperparameter updates.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/dot-slice_on_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Slice sampler on log-scale (internal) — .slice_on_log","text":"","code":".slice_on_log(logpost, loga0, w = 1, m = 20L, lower = -Inf, upper = Inf)"},{"path":"https://laposanti.github.io/BTSBM/reference/dot-slice_on_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Slice sampler on log-scale (internal) — .slice_on_log","text":"logpost Function taking loga returning log-posterior constant. loga0 Numeric; current log value. w Step-width (default 1). m Max step-steps (default 20). lower, upper Hard bounds loga.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/dot-slice_on_log.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Slice sampler on log-scale (internal) — .slice_on_log","text":"new loga draw.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/expected_cl_py.html","id":null,"dir":"Reference","previous_headings":"","what":"Expected number of clusters under finite/inf PY/DM-like priors (helper) — expected_cl_py","title":"Expected number of clusters under finite/inf PY/DM-like priors (helper) — expected_cl_py","text":"Expected number clusters finite/inf PY/DM-like priors (helper)","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/expected_cl_py.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expected number of clusters under finite/inf PY/DM-like priors (helper) — expected_cl_py","text":"","code":"expected_cl_py(n, sigma, theta, H)"},{"path":"https://laposanti.github.io/BTSBM/reference/expected_cl_py.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expected number of clusters under finite/inf PY/DM-like priors (helper) — expected_cl_py","text":"n integer(1) number items. sigma numeric(1) discount (0 DP/DM). theta numeric(1) concentration parameter. H integer(1) maximum number clusters, Inf.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/expected_cl_py.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expected number of clusters under finite/inf PY/DM-like priors (helper) — expected_cl_py","text":"Numeric(1) expected number clusters.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/gibbs_bt_sbm.html","id":null,"dir":"Reference","previous_headings":"","what":"Gibbs sampler for a Bradley–Terry Stochastic Block Model (BT–SBM) — gibbs_bt_sbm","title":"Gibbs sampler for a Bradley–Terry Stochastic Block Model (BT–SBM) — gibbs_bt_sbm","text":"Runs Gibbs sampler BT–SBM. returns relabeled samples computes minimal posterior summaries. Row names w_ij (present) propagated item-level outputs; otherwise items named Item_1, ..., Item_N.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/gibbs_bt_sbm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gibbs sampler for a Bradley–Terry Stochastic Block Model (BT–SBM) — gibbs_bt_sbm","text":"","code":"gibbs_bt_sbm(   w_ij,   a = 4,   prior = c(\"DP\", \"PY\", \"DM\", \"GN\"),   alpha_PY = NA_real_,   sigma_PY = NA_real_,   beta_DM = NA_real_,   H_DM = NA_integer_,   gamma_GN = NA_real_,   n_iter = 2000,   burnin = 1000,   init_x = NULL,   store_z = FALSE,   verbose = TRUE )"},{"path":"https://laposanti.github.io/BTSBM/reference/gibbs_bt_sbm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gibbs sampler for a Bradley–Terry Stochastic Block Model (BT–SBM) — gibbs_bt_sbm","text":"w_ij Integer numeric square matrix \\(n \\times n\\) directed wins (e.g., w_ij[,j] wins \\(\\) \\(j\\)). Must nonnegative entries n_ij <= w_ij + t(w_ij) elementwise. positive parameter Gamma prior \\(\\lambda_k \\sim \\mathrm{Gamma}(,b)\\). algorithm uses \\(b=\\exp(\\psi())\\) align prior likelihood expectation log \\(\\lambda_k\\) prior Character scalar, one \"DP\", \"PY\", \"DM\", \"GN\". alpha_PY, sigma_PY Hyperparameters Pitman–Yor/Dirichlet Process. prior=\"DP\" use alpha_PY; prior=\"PY\" use alpha_PY sigma_PY (0,1). beta_DM, H_DM Hyperparameters Dirichlet–Multinomial prior H_DM gives maximum number allowed clusters. gamma_GN Hyperparameter Gnedin prior. n_iter, burnin Integers, total iterations burn-. Must satisfy burnin < n_iter. init_x Optional integer vector length n initial labels (1-based). store_z Logical, store latent Z draws (heavy; defaults FALSE). verbose Logical, progress every 1000 iterations.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/gibbs_bt_sbm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gibbs sampler for a Bradley–Terry Stochastic Block Model (BT–SBM) — gibbs_bt_sbm","text":"plain list following elements: list x (matrix S x n raw labels), K (vector length S)","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/gibbs_bt_sbm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gibbs sampler for a Bradley–Terry Stochastic Block Model (BT–SBM) — gibbs_bt_sbm","text":"","code":"if (FALSE) { # \\dontrun{ set.seed(1) n <- 6L w <- matrix(0L, n, n) w[lower.tri(w)] <- rpois(sum(lower.tri(w)), 2) rownames(w) <- colnames(w) <- paste0(\"P\", seq_len(n)) fit <- gibbs_bt_sbm(w, prior=\"GN\", gamma_GN=0.5, n_iter=200, burnin=100) } # }"},{"path":"https://laposanti.github.io/BTSBM/reference/gibbs_bt_simple.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple Bradley–Terry Gibbs sampler (no clustering) — gibbs_bt_simple","title":"Simple Bradley–Terry Gibbs sampler (no clustering) — gibbs_bt_simple","text":"Simple Bradley–Terry Gibbs sampler (clustering)","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/gibbs_bt_simple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple Bradley–Terry Gibbs sampler (no clustering) — gibbs_bt_simple","text":"","code":"gibbs_bt_simple(   w_ij,   n_ij,   a = 0.01,   b = 1,   n_iter = 5000,   burnin = 1000,   verbose = TRUE )"},{"path":"https://laposanti.github.io/BTSBM/reference/gibbs_bt_simple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple Bradley–Terry Gibbs sampler (no clustering) — gibbs_bt_simple","text":"w_ij integer/numeric K x K wins j. n_ij integer/numeric K x K total matches (symmetric, diag = 0). , b numeric(1) Gamma(,b) prior \\(\\lambda_i\\). n_iter, burnin integers; total iterations burn-. verbose logical; print progress.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/gibbs_bt_simple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple Bradley–Terry Gibbs sampler (no clustering) — gibbs_bt_simple","text":"list lambda_samples (matrix size (n_iter-burnin) x K).","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/gibbs_bt_simple.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple Bradley–Terry Gibbs sampler (no clustering) — gibbs_bt_simple","text":"","code":"if (FALSE) { # \\dontrun{ set.seed(1) K <- 6 n <- matrix(0, K, K); n[upper.tri(n)] <- sample(0:3, sum(upper.tri(n)), TRUE) n <- n + t(n); diag(n) <- 0 w <- matrix(0, K, K); w[upper.tri(w)] <- rbinom(sum(upper.tri(n)), n[upper.tri(n)], 0.5) w <- w + t(n - w); diag(w) <- 0 fit <- gibbs_bt_simple(w, n, a = 1, b = 1, n_iter = 500, burnin = 100, verbose = FALSE) } # }"},{"path":"https://laposanti.github.io/BTSBM/reference/lambda_to_theta.html","id":null,"dir":"Reference","previous_headings":"","what":"Map \\(\\lambda\\) to Bradley–Terry \\(\\theta = \\lambda_i / (\\lambda_i + \\lambda_j)\\) — lambda_to_theta","title":"Map \\(\\lambda\\) to Bradley–Terry \\(\\theta = \\lambda_i / (\\lambda_i + \\lambda_j)\\) — lambda_to_theta","text":"Map \\(\\lambda\\) Bradley–Terry \\(\\theta = \\lambda_i / (\\lambda_i + \\lambda_j)\\)","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/lambda_to_theta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map \\(\\lambda\\) to Bradley–Terry \\(\\theta = \\lambda_i / (\\lambda_i + \\lambda_j)\\) — lambda_to_theta","text":"","code":"lambda_to_theta(lambda)"},{"path":"https://laposanti.github.io/BTSBM/reference/lambda_to_theta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map \\(\\lambda\\) to Bradley–Terry \\(\\theta = \\lambda_i / (\\lambda_i + \\lambda_j)\\) — lambda_to_theta","text":"lambda Numeric vector positive rates \\(\\lambda_i\\).","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/lambda_to_theta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map \\(\\lambda\\) to Bradley–Terry \\(\\theta = \\lambda_i / (\\lambda_i + \\lambda_j)\\) — lambda_to_theta","text":"matrix entries \\(\\theta_{ij} = \\lambda_i / (\\lambda_i + \\lambda_j)\\). Diagonal 1/2 formula; may overwrite prefer NA diagonal.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/lambda_to_theta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map \\(\\lambda\\) to Bradley–Terry \\(\\theta = \\lambda_i / (\\lambda_i + \\lambda_j)\\) — lambda_to_theta","text":"","code":"lambda_to_theta(c(1,2,4)) #>           [,1]      [,2]      [,3] #> [1,] 0.5000000 0.3333333 0.2000000 #> [2,] 0.6666667 0.5000000 0.3333333 #> [3,] 0.8000000 0.6666667 0.5000000"},{"path":"https://laposanti.github.io/BTSBM/reference/make_bt_cluster_loo.html","id":null,"dir":"Reference","previous_headings":"","what":"Log-likelihood matrix for the BT–SBM (clustered) model — make_bt_cluster_loo","title":"Log-likelihood matrix for the BT–SBM (clustered) model — make_bt_cluster_loo","text":"Builds S x D matrix log-likelihood values using cluster labels \\(x_i\\) cluster rates \\(\\lambda_k\\). Assumes x_samples lambda_samples relabelled consistently (e.g. via inference_helper). Builds S x D matrix log-likelihood values using cluster labels \\(x_i\\) cluster rates \\(\\lambda_k\\). Assumes inputs relabelled consistently.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/make_bt_cluster_loo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log-likelihood matrix for the BT–SBM (clustered) model — make_bt_cluster_loo","text":"","code":"make_bt_cluster_loo(w_ij, n_ij, lambda_samples, x_samples)  make_bt_cluster_loo(w_ij, n_ij, lambda_samples, x_samples)"},{"path":"https://laposanti.github.io/BTSBM/reference/make_bt_cluster_loo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log-likelihood matrix for the BT–SBM (clustered) model — make_bt_cluster_loo","text":"w_ij integer/numeric K x K wins (j). n_ij integer/numeric K x K total matches (symmetric, diag=0). lambda_samples numeric S x K matrix cluster rates \\(\\lambda_k\\). x_samples integer S x K matrix cluster labels player.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/make_bt_cluster_loo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log-likelihood matrix for the BT–SBM (clustered) model — make_bt_cluster_loo","text":"list : ll — S x D matrix log-likelihoods. obs_idx — D x 2 matrix (,j) indices defining column. list : ll — S x D matrix log-likelihoods. obs_idx — D x 2 matrix (,j) indices defining column.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/make_bt_cluster_loo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Log-likelihood matrix for the BT–SBM (clustered) model — make_bt_cluster_loo","text":"","code":"if (FALSE) { # \\dontrun{ # After running your clustered sampler and relabeling: # ll_obj <- make_bt_cluster_loo(w, n, out$lambda_samples_relabel, out$x_samples_relabel) } # }"},{"path":"https://laposanti.github.io/BTSBM/reference/make_bt_loo_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Build BT clustered log-likelihood matrix (player-level) — make_bt_loo_cluster","title":"Build BT clustered log-likelihood matrix (player-level) — make_bt_loo_cluster","text":"Convenience alternative returning plain S x P matrix (P = #pairs).","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/make_bt_loo_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build BT clustered log-likelihood matrix (player-level) — make_bt_loo_cluster","text":"","code":"make_bt_loo_cluster(x_draws, lambda_draws, w_ij, n_ij)"},{"path":"https://laposanti.github.io/BTSBM/reference/make_bt_loo_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build BT clustered log-likelihood matrix (player-level) — make_bt_loo_cluster","text":"x_draws integer S x K matrix cluster labels per draw. lambda_draws numeric S x K matrix cluster rates per draw. w_ij, n_ij K x K wins matches.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/make_bt_loo_cluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build BT clustered log-likelihood matrix (player-level) — make_bt_loo_cluster","text":"Numeric matrix S x P log-likelihoods.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/make_bt_simple_loo.html","id":null,"dir":"Reference","previous_headings":"","what":"Log-likelihood matrix for the simple Bradley–Terry model — make_bt_simple_loo","title":"Log-likelihood matrix for the simple Bradley–Terry model — make_bt_simple_loo","text":"Builds S x D matrix log-likelihood values, S number posterior draws D number observed unordered pairs (<j) n_ij > 0. suitable input loo. Builds S x D matrix log-likelihood values, S number posterior draws D number observed unordered pairs (<j) n_ij > 0.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/make_bt_simple_loo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log-likelihood matrix for the simple Bradley–Terry model — make_bt_simple_loo","text":"","code":"make_bt_simple_loo(w_ij, n_ij, lambda_samples)  make_bt_simple_loo(w_ij, n_ij, lambda_samples)"},{"path":"https://laposanti.github.io/BTSBM/reference/make_bt_simple_loo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log-likelihood matrix for the simple Bradley–Terry model — make_bt_simple_loo","text":"w_ij integer/numeric K x K wins (j). n_ij integer/numeric K x K total matches (symmetric, diag=0). lambda_samples numeric S x K matrix player-specific rates \\(\\lambda_i\\).","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/make_bt_simple_loo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log-likelihood matrix for the simple Bradley–Terry model — make_bt_simple_loo","text":"list : ll — S x D matrix log-likelihoods. obs_idx — D x 2 matrix (,j) indices defining column. list : ll — S x D matrix log-likelihoods. obs_idx — D x 2 matrix (,j) indices defining column.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/make_bt_simple_loo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Log-likelihood matrix for the simple Bradley–Terry model — make_bt_simple_loo","text":"","code":"if (FALSE) { # \\dontrun{ set.seed(1) K <- 5 n <- matrix(0, K, K); n[upper.tri(n)] <- sample(0:4, sum(upper.tri(n)), TRUE) n <- n + t(n); diag(n) <- 0 w <- matrix(0, K, K); w[upper.tri(w)] <- rbinom(sum(upper.tri(w)), n[upper.tri(n)], 0.5) w <- w + t(n - w); diag(w) <- 0 lam <- matrix(rexp(200*K), 200, K) ll_obj <- make_bt_simple_loo(w, n, lam) } # }"},{"path":"https://laposanti.github.io/BTSBM/reference/plot_assignment_probabilities.html","id":null,"dir":"Reference","previous_headings":"","what":"Assignment probability heatmap (BT-SBM) — plot_assignment_probabilities","title":"Assignment probability heatmap (BT-SBM) — plot_assignment_probabilities","text":"Heatmap item-wise posterior assignment probabilities clusters (relabeled Cluster 1 top block decreasing \\(\\lambda\\)). Items ordered probable cluster marginal wins.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/plot_assignment_probabilities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assignment probability heatmap (BT-SBM) — plot_assignment_probabilities","text":"","code":"plot_assignment_probabilities(   fit,   w_ij = NULL,   max_n_clust = NULL,   clean_fun = clean_players_names,   k_show = NULL,   fill_low = \"#FFFFCC\",   fill_high = \"#006400\" )"},{"path":"https://laposanti.github.io/BTSBM/reference/plot_assignment_probabilities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assignment probability heatmap (BT-SBM) — plot_assignment_probabilities","text":"fit Output list gibbs_BT_SBM() (must include relabeled$assign_prob). w_ij Optional wins matrix compute marginal wins ordering annotation. NULL, items ordered -probable cluster . max_n_clust filter mcmc x_t. specified use modal K clean_fun Optional function prettify names. Default: identity. k_show Optional integer number clusters show (defaults columns assign_prob). fill_low, fill_high Colors heatmap gradient low/high.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/plot_assignment_probabilities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assignment probability heatmap (BT-SBM) — plot_assignment_probabilities","text":"ggplot object.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/plot_assignment_probabilities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assignment probability heatmap (BT-SBM) — plot_assignment_probabilities","text":"","code":"if (FALSE) { # \\dontrun{ p <- plot_assignment_probabilities(fit, w_ij) } # }"},{"path":"https://laposanti.github.io/BTSBM/reference/plot_block_adjacency.html","id":null,"dir":"Reference","previous_headings":"","what":"Block-ordered adjacency heatmap (BT-SBM) — plot_block_adjacency","title":"Block-ordered adjacency heatmap (BT-SBM) — plot_block_adjacency","text":"Plot adjacency (wins / matches) heatmap rows/cols ordered hard partition (fit$estimates$x_hat) , within blocks, marginal wins. Draws block boundary lines (optionally) side color strip block IDs ggside installed.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/plot_block_adjacency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Block-ordered adjacency heatmap (BT-SBM) — plot_block_adjacency","text":"","code":"plot_block_adjacency(   fit,   w_ij,   clean_fun = clean_players_names,   palette = c(`0` = \"#FFFFFF\", `1` = \"#CDEB8B\", `2` = \"#78AB46\", `3` = \"#FFD700\", `4` =     \"#FF8C00\", `5` = \"#00441B\"),   fill_low = \"#FFFFCC\",   fill_high = \"#006400\" )"},{"path":"https://laposanti.github.io/BTSBM/reference/plot_block_adjacency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Block-ordered adjacency heatmap (BT-SBM) — plot_block_adjacency","text":"fit Output list gibbs_BT_SBM(). w_ij Integer matrix wins (players & order used fit). clean_fun Optional function prettify player names. Default: identity. palette Named colors blocks (character vector). Defaults Wimbledon-ish palette. fill_low, fill_high Colors heatmap gradient low/high. max_n_clust filter mcmc x_t. specified use modal K","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/plot_block_adjacency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Block-ordered adjacency heatmap (BT-SBM) — plot_block_adjacency","text":"ggplot object.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/plot_block_adjacency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Block-ordered adjacency heatmap (BT-SBM) — plot_block_adjacency","text":"","code":"if (FALSE) { # \\dontrun{ p <- plot_block_adjacency(fit, w_ij) } # }"},{"path":"https://laposanti.github.io/BTSBM/reference/plot_lambda_uncertainty.html","id":null,"dir":"Reference","previous_headings":"","what":"Lambda uncertainty plot (per player) — plot_lambda_uncertainty","title":"Lambda uncertainty plot (per player) — plot_lambda_uncertainty","text":"Forest plot per-player posterior \\(\\lambda\\) uncertainty intervals, using relabeled draws. Points colored hard partition (fit$estimates$x_hat).","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/plot_lambda_uncertainty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lambda uncertainty plot (per player) — plot_lambda_uncertainty","text":"","code":"plot_lambda_uncertainty(   fit,   w_ij,   log_base = 10,   max_n_clust = NULL,   prob = 0.9,   palette = c(`0` = \"#FFFFFF\", `1` = \"#CDEB8B\", `2` = \"#78AB46\", `3` = \"#FFD700\", `4` =     \"#FF8C00\", `5` = \"#00441B\"),   clean_fun = clean_players_names )"},{"path":"https://laposanti.github.io/BTSBM/reference/plot_lambda_uncertainty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lambda uncertainty plot (per player) — plot_lambda_uncertainty","text":"fit Output gibbs_BT_SBM() opt_lambda$lambda_item computed (set keep_lambda=TRUE sampling). w_ij Optional wins matrix compute marginal wins ordering annotation. log_base Base x-axis logarithm (10 e). Defaults 10. max_n_clust filter mcmc x_t. specified use modal K prob Interval probability HPD (e.g., 0.90). palette Named colors clusters. clean_fun Optional player-name cleaner. Default: identity.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/plot_lambda_uncertainty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lambda uncertainty plot (per player) — plot_lambda_uncertainty","text":"ggplot object.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/plot_lambda_uncertainty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lambda uncertainty plot (per player) — plot_lambda_uncertainty","text":"","code":"if (FALSE) { # \\dontrun{ # fit with keep_lambda=TRUE p <- plot_lambda_uncertainty(fit, prob = 0.90) } # }"},{"path":"https://laposanti.github.io/BTSBM/reference/relabel_by_lambda.html","id":null,"dir":"Reference","previous_headings":"","what":"Relabel cluster assignments by decreasing lambda — relabel_by_lambda","title":"Relabel cluster assignments by decreasing lambda — relabel_by_lambda","text":"Given posterior samples labels x_samples (S x N) corresponding cluster-level intensities lambda_samples per iteration, produce canonical relabeling cluster 1 largest \\(\\lambda\\), cluster 2 second largest, etc. Also computes co-clustering summaries assignment probabilities.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/relabel_by_lambda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relabel cluster assignments by decreasing lambda — relabel_by_lambda","text":"","code":"relabel_by_lambda(x_samples, lambda_samples)"},{"path":"https://laposanti.github.io/BTSBM/reference/relabel_by_lambda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relabel cluster assignments by decreasing lambda — relabel_by_lambda","text":"x_samples Integer matrix S x N sampled labels (arbitrary ids per iter). lambda_samples Either: list length S numeric vectors indexed raw label id (NAs allowed non-occupied ids), matrix S x L giving per-iteration \\(\\lambda_\\ell\\) label \\(\\ell\\).","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/relabel_by_lambda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Relabel cluster assignments by decreasing lambda — relabel_by_lambda","text":"list components: x_samples_relabel S x N integer matrix relabeled draws (1..H per iter, ordered \\(\\lambda\\)). lambda_samples_relabel S x N numeric matrix assigning item cluster's \\(\\lambda\\) relabeling. item_cluster_assignment_probs N x Kmax data frame marginal assignment probabilities. block_count_distribution Data frame distribution number blocks across iterations. avg_top_block_count Average size top-\\(\\lambda\\) block. co_clustering Posterior similarity matrix (N x N). minVI_partition Hard partition via minVI. partition_binder Hard partition via Binder's loss. n_clusters_each_iter Integer vector length S number blocks per iteration. top_block_count_per_iter Integer vector length S size top block per iteration. cluster_lambda_ordered List length S ordered \\(\\lambda\\) vectors (length H per iter).","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/relabel_by_lambda.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Relabel cluster assignments by decreasing lambda — relabel_by_lambda","text":"function first compacts raw labels 1..H within iteration, orders occupied labels decreasing \\(\\lambda\\), producing canonical labeling. Co-clustering summaries use mcclust mcclust.ext.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/relabel_by_lambda.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Relabel cluster assignments by decreasing lambda — relabel_by_lambda","text":"","code":"if (FALSE) { # \\dontrun{ S <- 100; N <- 20 set.seed(42) x_samps <- matrix(sample(1:3, S*N, TRUE), S, N) lam_list <- replicate(S, { v <- rep(NA_real_, 5); v[1:3] <- runif(3, 0.5, 2); v }, simplify=FALSE) out <- relabel_by_lambda(x_samps, lam_list) table(out$block_count_distribution$num_blocks) } # }"},{"path":"https://laposanti.github.io/BTSBM/reference/shannon_entropy.html","id":null,"dir":"Reference","previous_headings":"","what":"Shannon entropy (nats) — shannon_entropy","title":"Shannon entropy (nats) — shannon_entropy","text":"Shannon entropy (nats)","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/shannon_entropy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shannon entropy (nats) — shannon_entropy","text":"","code":"shannon_entropy(p)"},{"path":"https://laposanti.github.io/BTSBM/reference/shannon_entropy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shannon entropy (nats) — shannon_entropy","text":"p numeric vector nonnegative masses.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/shannon_entropy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shannon entropy (nats) — shannon_entropy","text":"numeric(1) entropy nats.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/updateZ_and_rowsums.html","id":null,"dir":"Reference","previous_headings":"","what":"@keywords internal — updateZ_and_rowsums","title":"@keywords internal — updateZ_and_rowsums","text":"@keywords internal","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/updateZ_and_rowsums.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"@keywords internal — updateZ_and_rowsums","text":"","code":"updateZ_and_rowsums(n_ij, x, lambda)"},{"path":"https://laposanti.github.io/BTSBM/reference/urn_DM.html","id":null,"dir":"Reference","previous_headings":"","what":"Urn weight: Dirichlet–Multinomial with max H_DM clusters — urn_DM","title":"Urn weight: Dirichlet–Multinomial with max H_DM clusters — urn_DM","text":"Urn weight: Dirichlet–Multinomial max H_DM clusters","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/urn_DM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Urn weight: Dirichlet–Multinomial with max H_DM clusters — urn_DM","text":"","code":"urn_DM(v_minus, beta_DM, H_DM)"},{"path":"https://laposanti.github.io/BTSBM/reference/urn_DM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Urn weight: Dirichlet–Multinomial with max H_DM clusters — urn_DM","text":"v_minus integer sizes occupied clusters (excluding current item). beta_DM numeric concentration. H_DM integer maximum number clusters.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/urn_DM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Urn weight: Dirichlet–Multinomial with max H_DM clusters — urn_DM","text":"Numeric vector length \\(H+1\\): existing weights new-cluster mass.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/urn_DP.html","id":null,"dir":"Reference","previous_headings":"","what":"Urn weight: Dirichlet Process — urn_DP","title":"Urn weight: Dirichlet Process — urn_DP","text":"Urn weight: Dirichlet Process","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/urn_DP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Urn weight: Dirichlet Process — urn_DP","text":"","code":"urn_DP(v_minus, alpha_PY)"},{"path":"https://laposanti.github.io/BTSBM/reference/urn_DP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Urn weight: Dirichlet Process — urn_DP","text":"v_minus integer sizes occupied clusters (excluding current item). alpha_PY numeric concentration.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/urn_DP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Urn weight: Dirichlet Process — urn_DP","text":"Numeric vector length \\(H+1\\): existing weights new-cluster mass.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/urn_GN.html","id":null,"dir":"Reference","previous_headings":"","what":"Urn weight: Gnedin heuristic — urn_GN","title":"Urn weight: Gnedin heuristic — urn_GN","text":"Urn weight: Gnedin heuristic","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/urn_GN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Urn weight: Gnedin heuristic — urn_GN","text":"","code":"urn_GN(v_minus, gamma)"},{"path":"https://laposanti.github.io/BTSBM/reference/urn_GN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Urn weight: Gnedin heuristic — urn_GN","text":"v_minus integer sizes occupied clusters (excluding current item). gamma numeric parameter.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/urn_GN.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Urn weight: Gnedin heuristic — urn_GN","text":"Numeric vector length \\(H+1\\).","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/urn_PY.html","id":null,"dir":"Reference","previous_headings":"","what":"Urn weight: Pitman–Yor process — urn_PY","title":"Urn weight: Pitman–Yor process — urn_PY","text":"Urn weight: Pitman–Yor process","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/urn_PY.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Urn weight: Pitman–Yor process — urn_PY","text":"","code":"urn_PY(v_minus, alpha_PY, sigma_PY)"},{"path":"https://laposanti.github.io/BTSBM/reference/urn_PY.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Urn weight: Pitman–Yor process — urn_PY","text":"v_minus integer sizes occupied clusters (excluding current item). alpha_PY numeric concentration. sigma_PY numeric discount [0,1).","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/urn_PY.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Urn weight: Pitman–Yor process — urn_PY","text":"Numeric vector length \\(H+1\\).","code":""}]
