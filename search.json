[{"path":"https://laposanti.github.io/BTSBM/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Lapo Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://laposanti.github.io/BTSBM/articles/Notation.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Notation and Object Dimensions for the Bradley–Terry Stochastic Block Model","text":"consider set (n) items/players observed directed wins (\\(w_{ij}\\)). total number encounters (\\(n_{ij} = w_{ij} + w_{ji}\\)). clustered Bradley–Terry–SBM (BT–SBM), item () belongs latent block (\\(x_i \\{1,\\dots,K}\\)), blocks intensities (\\(\\lambda_k>0\\)). simple BT model corresponds (\\(K=n\\)) item-specific intensities. vignette documents symbols, R object names, dimensions used throughout package.","code":""},{"path":"https://laposanti.github.io/BTSBM/articles/Notation.html","id":"symbols-and-r-names","dir":"Articles","previous_headings":"","what":"Symbols and R names","title":"Notation and Object Dimensions for the Bradley–Terry Stochastic Block Model","text":"Notes: never require user pass n_ij; constructed validated internally. relabeling decreasing (\\(\\lambda\\)), cluster ids canonicalized (\\(1...K\\)) cluster 1 largest (\\(\\lambda\\)).","code":""},{"path":"https://laposanti.github.io/BTSBM/articles/Notation.html","id":"dimensions-at-a-glance","dir":"Articles","previous_headings":"","what":"Dimensions at a glance","title":"Notation and Object Dimensions for the Bradley–Terry Stochastic Block Model","text":"Let (\\(S = T_{\\text{iter}} - T_{\\text{burn}}\\)). w_ij: n x n internally computed n_ij: n x n x_samples: S x n lambda_list: length S, element s length L_cap[s], NA empty labels lambda_samples_relabel: S x n z_samples (stored): S x n x n K_per_iter, L_cap_per_iter: length S LOO log-likelihood matrices: ll S x D, D = # {(,j): <j, n_ij[,j]>0} obs_idx D x 2","code":""},{"path":"https://laposanti.github.io/BTSBM/articles/Notation.html","id":"gibbs-samplers","dir":"Articles","previous_headings":"Dimensions at a glance","what":"Gibbs samplers","title":"Notation and Object Dimensions for the Bradley–Terry Stochastic Block Model","text":"Returns (sizes terms n S): Returns:","code":"# Clustered BT–SBM gibbs_bt_sbm(   w_ij,   prior   = c(\"DP\",\"PY\",\"DM\",\"GN\"),   a       = 4,   alpha_PY = NA_real_,   sigma_PY = NA_real_,   beta_DM  = NA_real_,   K_DM    = NA_integer_,   gamma_GN = NA_real_,   T_iter = 2000,   T_burn = 1000,   init_x = NULL,   store_z = FALSE,   verbose = TRUE ) list(   x_samples            = integer matrix [S x n],   lambda_samples       = list length S; each numeric vector length L_cap[s], NA for empty labels,   K_per_iter           = integer vector [S],   L_cap_per_iter       = integer vector [S],   z_samples            = NULL or numeric array [S x n x n] ) # Simple BT (no clustering) gibbs_bt_simple(   w_ij,   a = 0.01,   b = 1,   T_iter = 5000,   T_burn = 1000,   verbose = TRUE ) list(lambda_samples = numeric matrix [S x n])"},{"path":"https://laposanti.github.io/BTSBM/articles/Notation.html","id":"relabeling-and-summaries","dir":"Articles","previous_headings":"Dimensions at a glance","what":"Relabeling and summaries","title":"Notation and Object Dimensions for the Bradley–Terry Stochastic Block Model","text":"x_samples: integer matrix [S x n] (raw ids per draw) lambda_samples: either list length S per-label vectors (ragged, NA empties), matrix [S x L_cap_max] NAs. Returns:","code":"relabel_by_lambda(x_samples, lambda_samples) list(   x_samples_relabel              = integer matrix [S x n],   lambda_samples_relabel         = numeric matrix  [S x n],   item_cluster_assignment_probs  = data.frame [n x K_max] (columns named \"Cluster_k\"),   block_count_distribution       = data.frame with columns {num_blocks, count, prob},   avg_top_block_count            = numeric(1),   co_clustering                  = numeric matrix [n x n],   minVI_partition                = integer vector length n,   partition_binder               = integer vector length n,   n_clusters_each_iter           = integer vector length S,   top_block_count_per_iter       = integer vector length S,   cluster_lambda_ordered         = list length S; numeric vectors length K[s] )"},{"path":"https://laposanti.github.io/BTSBM/articles/Notation.html","id":"loo-log-likelihood-builders","dir":"Articles","previous_headings":"Dimensions at a glance","what":"LOO log-likelihood builders","title":"Notation and Object Dimensions for the Bradley–Terry Stochastic Block Model","text":"return:","code":"make_bt_simple_loo(w_ij, lambda_samples) make_bt_cluster_loo(w_ij, lambda_samples, x_samples) list(   ll = numeric matrix [S x D],   obs_idx = integer matrix [D x 2]  # i,j pairs with n_ij[i,j] > 0 )"},{"path":"https://laposanti.github.io/BTSBM/articles/Notation.html","id":"model-comparison","dir":"Articles","previous_headings":"Dimensions at a glance","what":"Model comparison","title":"Notation and Object Dimensions for the Bradley–Terry Stochastic Block Model","text":"Returns list simple, cluster (loo objects) comparison (loo::compare_models).","code":"compare_bt_models_loo(simple_llo, cluster_llo)"},{"path":"https://laposanti.github.io/BTSBM/articles/Notation.html","id":"plotting-helpers-selected","dir":"Articles","previous_headings":"Dimensions at a glance","what":"Plotting helpers (selected)","title":"Notation and Object Dimensions for the Bradley–Terry Stochastic Block Model","text":"plot_block_adjacency(fit, w_ij, ...) – square heatmap ordered block marginal wins. plot_assignment_probabilities(fit, w_ij = NULL, ...) – item--cluster assignment heatmap. plot_lambda_uncertainty(fit, w_ij, ...) – forest plot per-item () intervals (log scale). accept w_ij recover names marginal summaries. require n_ij.","code":""},{"path":"https://laposanti.github.io/BTSBM/articles/Notation.html","id":"internal-bookkeeping-l_cap-vs-k","dir":"Articles","previous_headings":"","what":"Internal bookkeeping: L_cap vs K","title":"Notation and Object Dimensions for the Bradley–Terry Stochastic Block Model","text":"distinguish: K – number occupied clusters draw (size {k: csize[k] > 0}). L_cap – label capacity, current size allocated label id space. satisfies K ≤ L_cap ≤ min(n, K_max) used size arrays lambda_curr. Empty labels NA intensity. Diagnostics stored per saved draw: K_per_iter L_cap_per_iter.","code":""},{"path":"https://laposanti.github.io/BTSBM/articles/Notation.html","id":"validation-rules","dir":"Articles","previous_headings":"","what":"Validation rules","title":"Notation and Object Dimensions for the Bradley–Terry Stochastic Block Model","text":"w_ij must square non-negative integer/numeric matrix zero diagonal. Internally computed n_ij = w_ij + t(w_ij) symmetric zero diagonal; error . finite-cap priors, enforce K ≤ K_max urn weight capacity growth.","code":""},{"path":"https://laposanti.github.io/BTSBM/articles/Notation.html","id":"minimal-end-to-end-example","dir":"Articles","previous_headings":"","what":"Minimal end-to-end example","title":"Notation and Object Dimensions for the Bradley–Terry Stochastic Block Model","text":"","code":"set.seed(1) n <- 6L w <- matrix(0L, n, n) w[lower.tri(w)] <- rpois(sum(lower.tri(w)), 2) w <- w + t(w) - diag(diag(w + t(w)))  # keep diag 0, symmetric wins implied through n_ij rownames(w) <- colnames(w) <- paste0(\"P\", seq_len(n))  fit <- gibbs_bt_sbm(   w_ij = w,   prior = \"GN\",   gamma_GN = 0.5,   T_iter = 300,   T_burn = 150,   verbose = FALSE )  rel <- relabel_by_lambda(fit$x_samples, fit$lambda_samples) loo_simple  <- make_bt_simple_loo(w, lambda_samples = gibbs_bt_simple(w, T_iter=200, T_burn=100, verbose=FALSE)$lambda_samples) loo_cluster <- make_bt_cluster_loo(w, rel$cluster_lambda_ordered, rel$x_samples_relabel) comp <- compare_bt_models_loo(loo_simple, loo_cluster)"},{"path":"https://laposanti.github.io/BTSBM/articles/Notation.html","id":"package-documentation-style","dir":"Articles","previous_headings":"","what":"Package documentation style","title":"Notation and Object Dimensions for the Bradley–Terry Stochastic Block Model","text":"Arguments use snake_case. Matrices indexed entries use _ij suffix. Iteration counts T_iter T_burn. Finite-cap prior parameter K_max. Roxygen: use @param w_ij (wins), state n_ij computed internally. Equations roxygen use \\eqn{} \\deqn{}; articles use inline \\( \\) display \\[ \\].","code":""},{"path":"https://laposanti.github.io/BTSBM/articles/Notation.html","id":"linking-this-vignette-in-pkgdown","dir":"Articles","previous_headings":"","what":"Linking this vignette in pkgdown","title":"Notation and Object Dimensions for the Bradley–Terry Stochastic Block Model","text":"Add _pkgdown.yml: Ensure vignette file saved vignettes/notation.Rmd DESCRIPTION contains:","code":"articles:   - title: Concepts     contents:       - notation navbar:   structure:     left: [reference, articles]   components:     articles:       text: Articles       menu:         - text: \"Notation & Conventions\"           href: articles/notation.html Suggests: knitr, rmarkdown, pkgdown VignetteBuilder: knitr"},{"path":"https://laposanti.github.io/BTSBM/articles/Notation.html","id":"appendix-probability-parameterizations","dir":"Articles","previous_headings":"","what":"Appendix: Probability parameterizations","title":"Notation and Object Dimensions for the Bradley–Terry Stochastic Block Model","text":"Bradley–Terry mapping: given item-level rates (), define [_{ij} = ] helper lambda_to_theta(lambda) returns full (nn) matrix (_{ii}=1/2). Gamma prior centering: use rate parameter (b_ = (())) ([] = 0) priori, aiding identifiability via global rescaling. Relabeling convention: saved draw order occupied clusters decreasing () remap labels (1..K). Item-level intensities relabeling stored lambda_samples_relabel shape S x n. Version note. previously used n_iter, burnin, H_DM earlier versions, now T_iter, T_burn, K_max. Backward-compatibility shims may emit deprecation warnings.","code":""},{"path":"https://laposanti.github.io/BTSBM/articles/getting-started.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Getting started with BTSBM: the R package for the BT-SBM paper","text":"vignette shows minimal workflow BTSBM functions. use illustrative dataset 2017 Men’s ATP season convenience.","code":""},{"path":"https://laposanti.github.io/BTSBM/articles/getting-started.html","id":"set-up-the-data","dir":"Articles","previous_headings":"Overview","what":"Set up the data","title":"Getting started with BTSBM: the R package for the BT-SBM paper","text":"entry (w_{ij}) counts many matches player () won (j) chosen season. matrix directed (wins aren’t symmetric), diagonal zero design. practice, sparse rows/columns correspond players matches.","code":"#choosing the 2017 season w_ij = ATP_2000_2022$`2017`$Y_ij  #quick look at the matrix head(w_ij[1:3,1:3]) #>                 Rafael_Nadal Roger_Federer Grigor_Dimitrov #> Rafael_Nadal               0             0               3 #> Roger_Federer              4             0               1 #> Grigor_Dimitrov            0             0               0"},{"path":"https://laposanti.github.io/BTSBM/articles/getting-started.html","id":"prior-elicitation","dir":"Articles","previous_headings":"Overview","what":"Prior elicitation","title":"Getting started with BTSBM: the R package for the BT-SBM paper","text":"Choosing prior (\\(K\\)). number clusters unknown. (K) let data negotiate parsimony (blocks) expressiveness (many blocks). also curbs classic tendency mixture-like models -split data noisy.","code":"# Gamma hyper. a_strength = 2 # robust choice #Gnedin model chosen (Other possible choices \"DM\", \"PY\", \"DP\") prior = 'GN' gamma_GN = 0.8 n = nrow(w_ij) #check E[K | gamma, n] round(gnedin_K_mean(n,gamma_GN)) #> [1] 2 #check Var[K | gamma, n] gnedin_K_var(n,gamma_GN) #> [1] 45.95132"},{"path":"https://laposanti.github.io/BTSBM/articles/getting-started.html","id":"run-the-mcmc","dir":"Articles","previous_headings":"Overview","what":"Run the MCMC","title":"Getting started with BTSBM: the R package for the BT-SBM paper","text":"now draw samples joint posterior distribution using collapsed Gibbs sampler. simplified demonstration chain length intentionally short; empirical applications, longer runs parallel chains recommended.","code":"set.seed(123) T_iter = 10000 #for real use set it to 30,000 T_burn = 2000  out <- BTSBM::gibbs_bt_sbm(   w_ij   = w_ij,   a = a_strength,   prior  = prior,       # \"DP\", \"PY\", \"DM\", or \"GN\"   gamma_GN =  gamma_GN,   T_iter = T_iter,    T_burn = T_burn,   verbose = T ) #> iter 1000 occupied = 4  #> iter 2000 occupied = 7  #> iter 3000 occupied = 7  #> iter 4000 occupied = 5  #> iter 5000 occupied = 4  #> iter 6000 occupied = 5  #> iter 7000 occupied = 4  #> iter 8000 occupied = 7  #> iter 9000 occupied = 7  #> iter 10000 occupied = 3"},{"path":"https://laposanti.github.io/BTSBM/articles/getting-started.html","id":"relabel-and-summarize","dir":"Articles","previous_headings":"Overview","what":"Relabel and summarize","title":"Getting started with BTSBM: the R package for the BT-SBM paper","text":"posterior distribution latent block-assignments invariant permutations cluster labels. Consequently, averaging summarizing raw samples meaningless without post-processing. Relabeling methods align label permutations across iterations, enabling consistent summaries cluster-specific parameters.","code":"library(dplyr) library(ggplot2) library(kableExtra) post <- BTSBM::relabel_by_lambda(out$x_samples, out$lambda_samples)  # Pretty table of the K posterior distribution pretty_table_K_distribution(post)"},{"path":"https://laposanti.github.io/BTSBM/articles/getting-started.html","id":"obtain-point-estimates","dir":"Articles","previous_headings":"Overview","what":"Obtain point estimates","title":"Getting started with BTSBM: the R package for the BT-SBM paper","text":"Partition estimates Binder Minimum Variation Information (MinVI) losses state---art point estimate methods partition samples. Binder’s loss tends favor slightly finer partitions, MinVI conservative. Comparing estimates provides insight stability inferred grouping structure.","code":"x_binder <- post$partition_binder #partition with Binder loss table(x_binder) #Block sizes #> x_binder #>  1  2  3  4  5  6  7  8  9 10 11  #>  2  1 16  5  1  1  1  1  3  1 73 x_minVI <- post$minVI_partition #partition with MIN-VI loss table(x_minVI) #Block sizes #> x_minVI #>  1  2  3  #>  2 21 82"},{"path":"https://laposanti.github.io/BTSBM/articles/getting-started.html","id":"plot-reordered-adjacency-matrix","dir":"Articles","previous_headings":"Overview","what":"Plot reordered adjacency matrix","title":"Getting started with BTSBM: the R package for the BT-SBM paper","text":"reordered adjacency matrix reveals empirical interaction pattern inferred blocks. Dark-green colour right -diagonal region correspond high winning proportions, uniform colours along main diagonal indicate balanced competitiveness within clusters. visualization serves qualitative validation inferred block structure.","code":"plot_block_adjacency(fit = post,                      w_ij = w_ij)"},{"path":"https://laposanti.github.io/BTSBM/articles/getting-started.html","id":"plot-assignment-uncertainty","dir":"Articles","previous_headings":"Overview","what":"Plot assignment uncertainty","title":"Getting started with BTSBM: the R package for the BT-SBM paper","text":"Posterior probabilities assignment \\(p(x_i = k | W)\\) quantify uncertainty player--block allocations. High uncertainty certain individuals typically signals boundary cases transitional players whose performance profile lies different clusters.","code":"plot_assignment_probabilities(fit = post, w_ij = w_ij)"},{"path":"https://laposanti.github.io/BTSBM/articles/getting-started.html","id":"plot-lambda-uncertainty","dir":"Articles","previous_headings":"Overview","what":"Plot lambda uncertainty","title":"Getting started with BTSBM: the R package for the BT-SBM paper","text":"Posterior uncertainty \\(\\lambda_{x_i}\\), strength player . Since players assigned block share \\(\\lambda\\), uncertainty driven assignment uncertainty. Reporting credible intervals gives precise idea relative strength differences clusters, players well.","code":"plot_lambda_uncertainty(fit = post, w_ij = w_ij, clean_fun = clean_players_names)"},{"path":"https://laposanti.github.io/BTSBM/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lapo Santi. Author, maintainer. Nial Friel. Author.            University College Dublin","code":""},{"path":"https://laposanti.github.io/BTSBM/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Santi L, Friel N (2025). BTSBM: Bayesian Bradley–Terry Stochastic Block Models Paired Comparison Data. R package version 0.1.0, https://github.com/laposanti/BTSBM.","code":"@Manual{,   title = {BTSBM: Bayesian Bradley–Terry Stochastic Block Models for Paired Comparison Data},   author = {Lapo Santi and Nial Friel},   year = {2025},   note = {R package version 0.1.0},   url = {https://github.com/laposanti/BTSBM}, }"},{"path":"https://laposanti.github.io/BTSBM/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Bradley–Terry SBM","text":"BTSBM implements Bayesian inference Bradley–Terry Stochastic Block Model (BT–SBM), combining pairwise comparison data latent block clustering items. package provides: ⚙️ Gibbs-type MCMC samplers posterior inference 🎯 Posterior relabeling, point estimates uncertainty quantification 🌐 Visualization tools clusters block interactions Applications include sports analytics, psychometrics, ranking problems hidden group structure.","code":""},{"path":"https://laposanti.github.io/BTSBM/index.html","id":"quick-links","dir":"","previous_headings":"Overview","what":"Quick Links","title":"Bradley–Terry SBM","text":"complete overview functions, see 👉 Function Reference step--step example using tennis data, visit 👉 Getting Started Vignette","code":""},{"path":"https://laposanti.github.io/BTSBM/index.html","id":"when-to-use-btsbm","dir":"","previous_headings":"","what":"When to Use BTSBM","title":"Bradley–Terry SBM","text":"Use model whenever outcomes can summarized pairwise preferences (beats j): binary outcome per pair (“j”) required — possibly aggregated counts. now , adopt sport-related jargon simplicity, framework well adapts aforementioned contexts well.","code":""},{"path":"https://laposanti.github.io/BTSBM/index.html","id":"required-inputs","dir":"","previous_headings":"","what":"Required Inputs","title":"Bradley–Terry SBM","text":"fit model, need one object:","code":""},{"path":"https://laposanti.github.io/BTSBM/index.html","id":"w-pairwise-interaction-matrix","dir":"","previous_headings":"Required Inputs","what":"w: pairwise interaction matrix","title":"Bradley–Terry SBM","text":"directed weighted/binary adjacency matrix. Square matrix (n × n), w[, j] = number times player beats j Diagonal must 0 (w[, ] = 0) unordered pair {,j}: ( n_{ij} = w_{ij} + w_{ji} )","code":""},{"path":"https://laposanti.github.io/BTSBM/index.html","id":"examples","dir":"","previous_headings":"Required Inputs","what":"Examples","title":"Bradley–Terry SBM","text":"() Aggregated counts (B) Binary outcomes ⚠️ matrix must symmetric!","code":"# items: A, B, C, D # w[i, j] = number of times i beat j w <- matrix( c( 0, 3, 0, 2, 1, 0, 4, 0, 2, 0, 0, 1, 0, 1, 3, 0 ), nrow = 4, byrow = TRUE, dimnames = list(c(\"A\",\"B\",\"C\",\"D\"), c(\"A\",\"B\",\"C\",\"D\")) ) # one comparison per pair observed (0/1 wins) # w[i, j] is binary w_bin <- matrix( c( 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0 ), nrow = 4, byrow = TRUE, dimnames = list(c(\"A\",\"B\",\"C\",\"D\"), c(\"A\",\"B\",\"C\",\"D\")) )"},{"path":"https://laposanti.github.io/BTSBM/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Bradley–Terry SBM","text":"Install development version GitHub:","code":"# install.packages(\"devtools\") devtools::install_github(\"laposanti/BTSBM\") library(BTSBM)"},{"path":"https://laposanti.github.io/BTSBM/index.html","id":"minimal-example","dir":"","previous_headings":"","what":"Minimal Example","title":"Bradley–Terry SBM","text":"Let’s fit BT–SBM Gnedin prior 2017 ATP season data:","code":"# choosing the 2017 season w_ij <- ATP_2000_2022$`2017`$Y_ij  # fit the model fit <- gibbs_bt_sbm( w_ij, a = 4, prior = \"GN\", n_iter = 500, burnin = 250, verbose = FALSE )  # relabel output post <- BTSBM::relabel_by_lambda(fit$x_samples, fit$lambda_samples)  # plot adjacency matrix plot_block_adjacency(fit = post, w_ij = w_ij)"},{"path":"https://laposanti.github.io/BTSBM/index.html","id":"workflow-at-a-glance","dir":"","previous_headings":"","what":"Workflow at a Glance","title":"Bradley–Terry SBM","text":"Prepare input matrix w Inspect prior using gnedin_K_mean() gnedin_K_var() Fit model via gibbs_bt_sbm() Relabel samples relabel_by_lambda() 5.️ Visualize clusters using plot_block_adjacency()","code":""},{"path":"https://laposanti.github.io/BTSBM/index.html","id":"learn-more","dir":"","previous_headings":"","what":"Learn More","title":"Bradley–Terry SBM","text":"👉 Function Reference 👉 Getting Started Vignette","code":""},{"path":"https://laposanti.github.io/BTSBM/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Bradley–Terry SBM","text":"Santi, L., & Friel, N. (2025). Bradley–Terry Stochastic Block Model. Working paper, University College Dublin.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/ATP_2000_2022.html","id":null,"dir":"Reference","previous_headings":"","what":"ATP Paired-Comparison Panels, 2000–2022 — ATP_2000_2022","title":"ATP Paired-Comparison Panels, 2000–2022 — ATP_2000_2022","text":"yearly panel head--head counts top 105 ATP players, suitable Bradley–Terry/Stochastic Block Model analyses. season, data include () number wins player \\(\\) player \\(j\\) (ii) number matches played \\(\\) \\(j\\), along per-season player metadata tibble.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/ATP_2000_2022.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ATP Paired-Comparison Panels, 2000–2022 — ATP_2000_2022","text":"","code":"ATP_2000_2022"},{"path":"https://laposanti.github.io/BTSBM/reference/ATP_2000_2022.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ATP Paired-Comparison Panels, 2000–2022 — ATP_2000_2022","text":"named list length 23, elements \"2000\", \"2001\", …, \"2022\". yearly element list length 3: Y_ij numeric matrix \\(105 \\times 105\\). Entry Y_ij[, j] count matches player \\(\\) defeated player \\(j\\) calendar year (nonnegative integer; diagonal zero). N_ij numeric matrix \\(105 \\times 105\\). Entry N_ij[, j] total number matches players \\(\\) \\(j\\) year (nonnegative integer; symmetric construction; diagonal zero). players_df tibble/data frame 105 rows 7 columns describing player index used matrices year: player Integer player identifier (row/column index used Y_ij N_ij). worst_rank Worst (numerically largest) ATP ranking attained player year. median_rank Median ATP ranking across player's ranking snapshots year. last_rank ATP ranking last snapshot available year (e.g., year-end ranking). age_year Approximate age (years) season (e.g., mid-season). ht_year Player height centimeters (season-level value). player_slug Character identifier (URL-safe underscored name) player.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/ATP_2000_2022.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"ATP Paired-Comparison Panels, 2000–2022 — ATP_2000_2022","text":"Aggregated package author public ATP results (e.g., tennis\\_atp datasets Jeff Sackmann) internal preprocessing. See package vignette provenance cleaning steps.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/ATP_2000_2022.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ATP Paired-Comparison Panels, 2000–2022 — ATP_2000_2022","text":"player ordering players_df defines row/column indexing Y_ij N_ij corresponding year. diagonal entries matrices zero definition. typical usage Bradley–Terry-type models, one can treat Y_ij[, j] number “successes” \\(\\) vs. \\(j\\), binomial denominator N_ij[, j].","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/ATP_2000_2022.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"ATP Paired-Comparison Panels, 2000–2022 — ATP_2000_2022","text":"matrices may sparse many player pairs. Ensure model code guards divisions zero N_ij[, j] = 0.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/ATP_2000_2022.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ATP Paired-Comparison Panels, 2000–2022 — ATP_2000_2022","text":"","code":"if (FALSE) { # \\dontrun{ data(ATP_2000_2022) names(ATP_2000_2022) year <- \"2000\" str(ATP_2000_2022[[year]])  # Player i's total wins that year: i <- 1 sum(ATP_2000_2022[[year]]$Y_ij[i, ], na.rm = TRUE)  # Total matches between i and j: j <- 2 ATP_2000_2022[[year]]$N_ij[i, j]  # Join player metadata to indices used in the matrices: head(ATP_2000_2022[[year]]$players_df) } # }"},{"path":"https://laposanti.github.io/BTSBM/reference/HGnedin.html","id":null,"dir":"Reference","previous_headings":"","what":"Gnedin prior normalization weight K(n,k) — HGnedin","title":"Gnedin prior normalization weight K(n,k) — HGnedin","text":"Computes unnormalized mass function term used Gnedin-type priors.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/HGnedin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gnedin prior normalization weight K(n,k) — HGnedin","text":"","code":"HGnedin(n, k, gamma = 0.5)"},{"path":"https://laposanti.github.io/BTSBM/reference/HGnedin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gnedin prior normalization weight K(n,k) — HGnedin","text":"n integer(1) total items. k integer vector block counts. gamma numeric(1) parameter \\(\\gamma > 0\\).","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/HGnedin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gnedin prior normalization weight K(n,k) — HGnedin","text":"Numeric vector weights \\(K(n,k)\\).","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/HGnedin.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Gnedin prior normalization weight K(n,k) — HGnedin","text":"Legramanti, S., Rigon, T., Durante, D., Dunson, D.B., 2022. Extended stochastic block models application criminal networks. Annals Applied Statistics 16. https://doi.org/10.1214/21-aoas1595","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/clean_players_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Format player/item names as ","title":"Format player/item names as ","text":"Format player/item names \"Surname F.\"","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/clean_players_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format player/item names as ","text":"","code":"clean_players_names(name)"},{"path":"https://laposanti.github.io/BTSBM/reference/clean_players_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format player/item names as ","text":"name character scalar vector (e.g., \"Roger Federer\").","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/clean_players_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format player/item names as ","text":"Character vector formatted names (e.g., \"Federer R.\").","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/clean_players_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format player/item names as ","text":"","code":"clean_players_names(c(\"Roger Federer\", \"Nadal\")) #> [1] \"Federer R .\" \"Nadal\""},{"path":"https://laposanti.github.io/BTSBM/reference/compare_bt_models_loo.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare BT models with Pareto-smoothed importance sampling LOO — compare_bt_models_loo","title":"Compare BT models with Pareto-smoothed importance sampling LOO — compare_bt_models_loo","text":"Convenience wrapper around loo comparing two log-likelihood matrices (simple vs clustered BT).","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/compare_bt_models_loo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare BT models with Pareto-smoothed importance sampling LOO — compare_bt_models_loo","text":"","code":"compare_bt_models_loo(simple_llo, cluster_llo)  compare_bt_models_loo(simple_llo, cluster_llo)"},{"path":"https://laposanti.github.io/BTSBM/reference/compare_bt_models_loo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare BT models with Pareto-smoothed importance sampling LOO — compare_bt_models_loo","text":"simple_llo list returned make_bt_simple_loo(). cluster_llo list returned make_bt_cluster_loo().","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/compare_bt_models_loo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare BT models with Pareto-smoothed importance sampling LOO — compare_bt_models_loo","text":"list : simple — loo object simple BT. cluster — loo object clustered BT–SBM. comparison — result loo::compare_models(). list : simple — loo object simple BT. cluster — loo object clustered BT–SBM. comparison — result loo::compare_models().","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/dot-new_cluster_integral_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Gamma-Poisson integrated log-likelihood (new block) — .new_cluster_integral_log","title":"Gamma-Poisson integrated log-likelihood (new block) — .new_cluster_integral_log","text":"Gamma-Poisson integrated log-likelihood (new block)","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/dot-new_cluster_integral_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gamma-Poisson integrated log-likelihood (new block) — .new_cluster_integral_log","text":"","code":".new_cluster_integral_log(wi, Zi, a_now, b_now)"},{"path":"https://laposanti.github.io/BTSBM/reference/dot-new_cluster_integral_log_anchored.html","id":null,"dir":"Reference","previous_headings":"","what":"Anchored version of the integrated log-score (drop a-only constant) — .new_cluster_integral_log_anchored","title":"Anchored version of the integrated log-score (drop a-only constant) — .new_cluster_integral_log_anchored","text":"Anchored version integrated log-score (drop -constant)","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/dot-new_cluster_integral_log_anchored.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Anchored version of the integrated log-score (drop a-only constant) — .new_cluster_integral_log_anchored","text":"","code":".new_cluster_integral_log_anchored(wi, Zi, a_now, b_now)"},{"path":"https://laposanti.github.io/BTSBM/reference/dot-sample_from_logweights.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample index from log-weights — .sample_from_logweights","title":"Sample index from log-weights — .sample_from_logweights","text":"Sample index log-weights","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/dot-sample_from_logweights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample index from log-weights — .sample_from_logweights","text":"","code":".sample_from_logweights(logw)"},{"path":"https://laposanti.github.io/BTSBM/reference/dot-slice_on_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Slice sampler on log-scale (internal) — .slice_on_log","title":"Slice sampler on log-scale (internal) — .slice_on_log","text":"Univariate slice sampling \\(\\log \\). Used internally hyperparameter updates.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/dot-slice_on_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Slice sampler on log-scale (internal) — .slice_on_log","text":"","code":".slice_on_log(logpost, loga0, w = 1, m = 20L, lower = -Inf, upper = Inf)"},{"path":"https://laposanti.github.io/BTSBM/reference/dot-slice_on_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Slice sampler on log-scale (internal) — .slice_on_log","text":"logpost Function taking loga returning log-posterior constant. loga0 Numeric; current log value. w Step-width (default 1). m Max step-steps (default 20). lower, upper Hard bounds loga.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/dot-slice_on_log.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Slice sampler on log-scale (internal) — .slice_on_log","text":"new loga draw.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/expected_cl_py.html","id":null,"dir":"Reference","previous_headings":"","what":"Expected number of clusters under finite/inf PY/DM-like priors (helper) — expected_cl_py","title":"Expected number of clusters under finite/inf PY/DM-like priors (helper) — expected_cl_py","text":"Expected number clusters finite/inf PY/DM-like priors (helper)","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/expected_cl_py.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expected number of clusters under finite/inf PY/DM-like priors (helper) — expected_cl_py","text":"","code":"expected_cl_py(n, sigma, theta, K_DM)"},{"path":"https://laposanti.github.io/BTSBM/reference/expected_cl_py.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expected number of clusters under finite/inf PY/DM-like priors (helper) — expected_cl_py","text":"n integer(1) number items. sigma numeric(1) discount (0 DP/DM). theta numeric(1) concentration parameter. K_DM integer(1) maximum number clusters, Inf.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/expected_cl_py.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expected number of clusters under finite/inf PY/DM-like priors (helper) — expected_cl_py","text":"Numeric(1) expected number clusters. #' @references Legramanti, S., Rigon, T., Durante, D., Dunson, D.B., 2022. Extended stochastic block models application criminal networks. Annals Applied Statistics 16. https://doi.org/10.1214/21-aoas1595","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/gibbs_bt_sbm.html","id":null,"dir":"Reference","previous_headings":"","what":"Gibbs sampler for the Bradley–Terry Stochastic Block Model (BT–SBM) — gibbs_bt_sbm","title":"Gibbs sampler for the Bradley–Terry Stochastic Block Model (BT–SBM) — gibbs_bt_sbm","text":"Runs Gibbs sampler BT–SBM optional DP/PY/DM/GN priors partition. Returns raw draws plus minimal summaries; n_ij computed internally w_ij + t(w_ij).","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/gibbs_bt_sbm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gibbs sampler for the Bradley–Terry Stochastic Block Model (BT–SBM) — gibbs_bt_sbm","text":"","code":"gibbs_bt_sbm(   w_ij,   a = 4,   prior = c(\"DP\", \"PY\", \"DM\", \"GN\"),   alpha_PY = NA_real_,   sigma_PY = NA_real_,   beta_DM = NA_real_,   K_DM = NA_integer_,   gamma_GN = NA_real_,   T_iter = 2000,   T_burn = 1000,   init_x = NULL,   store_z = FALSE,   verbose = TRUE )"},{"path":"https://laposanti.github.io/BTSBM/reference/gibbs_bt_sbm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gibbs sampler for the Bradley–Terry Stochastic Block Model (BT–SBM) — gibbs_bt_sbm","text":"w_ij Integer numeric square matrix \\(n \\times n\\) directed wins (j). Must nonnegative zero diagonal. function builds \\(n_{ij} = w_{ij} + w_{ji}\\) internally. Positive shape parameter Gamma prior \\(\\lambda_k \\sim \\mathrm{Gamma}(,b)\\). algorithm uses \\(b = \\exp(\\psi())\\) \\(\\mathbb{E}[\\log \\lambda_k] = 0\\) priori. prior Character scalar, one \"DP\", \"PY\", \"DM\", \"GN\". alpha_PY, sigma_PY Hyperparameters Pitman–Yor / Dirichlet Process. prior=\"DP\" use alpha_PY (sigma_PY ignored). prior=\"PY\" use alpha_PY sigma_PY (0,1). beta_DM, K_DM Hyperparameters finite Dirichlet–Multinomial prior. K_DM maximum number allowed clusters. gamma_GN Hyperparameter Gnedin prior. T_iter, T_burn Integers: total iterations burn-. Must satisfy T_burn < T_iter. init_x Optional integer vector length n initial labels (1-based). store_z Logical; TRUE, store latent Z draws (heavy). verbose Logical; TRUE, prints progress every 1000 iterations.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/gibbs_bt_sbm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gibbs sampler for the Bradley–Terry Stochastic Block Model (BT–SBM) — gibbs_bt_sbm","text":"list : x_samples: integer matrix \\(S \\times n\\) raw labels (\\(S = T_{\\mathrm{iter}}-T_{\\mathrm{burn}}\\)). lambda_samples: list length \\(S\\); element numeric vector length \\(L_{\\mathrm{cap}}\\) draw, NA empty labels. K_per_iter: integer vector length \\(S\\) (occupied cluster count per saved draw). L_cap_per_iter: integer vector length \\(S\\) (label capacity trace). z_samples: store_z=TRUE, numeric array \\(S \\times n \\times n\\); otherwise NULL.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/gibbs_bt_sbm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gibbs sampler for the Bradley–Terry Stochastic Block Model (BT–SBM) — gibbs_bt_sbm","text":"Row names w_ij (present) propagated item-level outputs; otherwise items named Item_1, ..., Item_n.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/gibbs_bt_sbm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gibbs sampler for the Bradley–Terry Stochastic Block Model (BT–SBM) — gibbs_bt_sbm","text":"","code":"if (FALSE) { # \\dontrun{ set.seed(1) n <- 6L w <- matrix(0L, n, n) w[lower.tri(w)] <- rpois(sum(lower.tri(w)), 2) diag(w) <- 0 rownames(w) <- colnames(w) <- paste0(\"P\", seq_len(n)) fit <- gibbs_bt_sbm(   w_ij = w, prior = \"GN\", gamma_GN = 0.5,   T_iter = 200, T_burn = 100, verbose = FALSE ) } # }"},{"path":"https://laposanti.github.io/BTSBM/reference/gibbs_bt_simple.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple Bradley–Terry Gibbs sampler (no clustering) — gibbs_bt_simple","title":"Simple Bradley–Terry Gibbs sampler (no clustering) — gibbs_bt_simple","text":"Simple Bradley–Terry Gibbs sampler (clustering)","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/gibbs_bt_simple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple Bradley–Terry Gibbs sampler (no clustering) — gibbs_bt_simple","text":"","code":"gibbs_bt_simple(   w_ij,   a = 0.01,   b = 0.1,   T_iter = 5000,   T_burn = 1000,   verbose = TRUE )"},{"path":"https://laposanti.github.io/BTSBM/reference/gibbs_bt_simple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple Bradley–Terry Gibbs sampler (no clustering) — gibbs_bt_simple","text":"w_ij integer/numeric \\(n \\times n\\) wins j (diag = 0, nonnegative). , b numeric(1) Gamma(,b) prior \\(\\lambda_i\\). T_iter, T_burn integers; total iterations burn-. Require T_burn < T_iter. verbose logical; print progress every 1000 iterations.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/gibbs_bt_simple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple Bradley–Terry Gibbs sampler (no clustering) — gibbs_bt_simple","text":"list lambda_samples (matrix size \\(S \\times n\\), \\(S=T_{\\text{iter}}-T_{\\text{burn}}\\)).","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/gibbs_bt_simple.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple Bradley–Terry Gibbs sampler (no clustering) — gibbs_bt_simple","text":"","code":"if (FALSE) { # \\dontrun{ set.seed(1) n <- 6L w <- matrix(0L, n, n) w[upper.tri(w)] <- rpois(sum(upper.tri(w)), 2) w <- w + t(w) - diag(diag(w)) fit <- gibbs_bt_simple(w, a = 1, b = 1, T_iter = 500, T_burn = 100, verbose = FALSE) } # }"},{"path":"https://laposanti.github.io/BTSBM/reference/gnedin_K_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Expected number of clusters under the Gnedin prior — gnedin_K_mean","title":"Expected number of clusters under the Gnedin prior — gnedin_K_mean","text":"Compute closed-form mean \\(K_n\\) (number clusters) Gnedin finite-type model (\\(\\sigma=-1\\)).","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/gnedin_K_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expected number of clusters under the Gnedin prior — gnedin_K_mean","text":"","code":"gnedin_K_mean(n, gamma)"},{"path":"https://laposanti.github.io/BTSBM/reference/gnedin_K_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expected number of clusters under the Gnedin prior — gnedin_K_mean","text":"n Integer vector sample sizes (\\(\\ge 1\\)). gamma Numeric vector Gnedin parameters, \\((0,1)\\).","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/gnedin_K_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expected number of clusters under the Gnedin prior — gnedin_K_mean","text":"numeric vector \\(\\mathbb{E}[K_n]\\) pair (n, gamma).","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/gnedin_K_mean.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Expected number of clusters under the Gnedin prior — gnedin_K_mean","text":"sample size \\(n \\ge 1\\) parameter \\(\\gamma \\(0,1)\\), mean $$   \\mathbb{E}[K_n] \\;=\\; \\frac{\\Gamma(n+1)\\,\\Gamma(1+\\gamma)}{\\Gamma(n+\\gamma)}. $$ implementation uses lgamma numerical stability vectorized n gamma (standard R recycling rules). formula follows directly standard Gibbs–type manipulations using factorial moments Chu–Vandermonde identity specialized \\(\\sigma=-1\\).","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/gnedin_K_mean.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Expected number of clusters under the Gnedin prior — gnedin_K_mean","text":"Gnedin, . (2010). species sampling model finitely many types. Electronic Communications Probability, 15, 79–88. Favaro, S., Lijoi, ., & Prünster, . (2013). Extending class Gibbs-type priors: theoretical properties new examples. Annals Applied Probability, 23(4), 1729–1754. Pitman, J. (2006). Combinatorial Stochastic Processes. Springer.","code":""},{"path":[]},{"path":"https://laposanti.github.io/BTSBM/reference/gnedin_K_mean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expected number of clusters under the Gnedin prior — gnedin_K_mean","text":"","code":"# Scalar inputs gnedin_K_mean(105, 0.8) #> [1] 2.36427  # Vectorized over gamma gnedin_K_mean(50, c(0.3, 0.5, 0.8)) #> [1] 13.906329  6.282256  2.039934  # Vectorized over n and gamma (recycling rules) gnedin_K_mean(c(20, 50, 100), 0.5) #> [1] 3.988173 6.282256 8.873354"},{"path":"https://laposanti.github.io/BTSBM/reference/gnedin_K_var.html","id":null,"dir":"Reference","previous_headings":"","what":"Variance of the number of clusters under the Gnedin prior — gnedin_K_var","title":"Variance of the number of clusters under the Gnedin prior — gnedin_K_var","text":"Compute closed-form variance \\(K_n\\) Gnedin finite-type model (\\(\\sigma=-1\\)).","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/gnedin_K_var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variance of the number of clusters under the Gnedin prior — gnedin_K_var","text":"","code":"gnedin_K_var(n, gamma)"},{"path":"https://laposanti.github.io/BTSBM/reference/gnedin_K_var.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variance of the number of clusters under the Gnedin prior — gnedin_K_var","text":"n Integer vector sample sizes (\\(\\ge 1\\)). gamma Numeric vector Gnedin parameters, \\((0,1)\\).","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/gnedin_K_var.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variance of the number of clusters under the Gnedin prior — gnedin_K_var","text":"numeric vector \\(\\mathrm{Var}(K_n)\\) pair (n, gamma).","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/gnedin_K_var.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Variance of the number of clusters under the Gnedin prior — gnedin_K_var","text":"Using factorial–ordinary moment relation \\(\\mathbb{E}[K_n^2]=\\mathbb{E}[K_n(K_n-1)]+\\mathbb{E}[K_n]\\), variance $$   \\mathrm{Var}(K_n) \\;=\\; \\mathbb{E}[K_n(K_n-1)] + \\mathbb{E}[K_n] - \\{\\mathbb{E}[K_n]\\}^2, $$ $$   \\mathbb{E}[K_n(K_n-1)]   \\;=\\; n(n-1)(1-\\gamma)\\,\\frac{\\Gamma(n)\\,\\Gamma(1+\\gamma)}{\\Gamma(n+\\gamma)}. $$ implementation uses lgamma numerical stability vectorized n gamma (standard R recycling rules).","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/gnedin_K_var.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Variance of the number of clusters under the Gnedin prior — gnedin_K_var","text":"Gnedin, . (2010). species sampling model finitely many types. Electronic Communications Probability, 15, 79–88. Favaro, S., Lijoi, ., & Prünster, . (2013). Extending class Gibbs-type priors: theoretical properties new examples. Annals Applied Probability, 23(4), 1729–1754. Pitman, J. (2006). Combinatorial Stochastic Processes. Springer.","code":""},{"path":[]},{"path":"https://laposanti.github.io/BTSBM/reference/gnedin_K_var.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variance of the number of clusters under the Gnedin prior — gnedin_K_var","text":"","code":"# Scalar inputs gnedin_K_var(105, 0.8) #> [1] 45.95132  # Consistency check: variance is nonnegative all(gnedin_K_var(20, c(0.3, 0.5, 0.8)) >= 0) #> [1] TRUE"},{"path":"https://laposanti.github.io/BTSBM/reference/lambda_to_theta.html","id":null,"dir":"Reference","previous_headings":"","what":"Map \\(\\lambda\\) to Bradley–Terry \\(\\theta = \\lambda_i / (\\lambda_i + \\lambda_j)\\) — lambda_to_theta","title":"Map \\(\\lambda\\) to Bradley–Terry \\(\\theta = \\lambda_i / (\\lambda_i + \\lambda_j)\\) — lambda_to_theta","text":"Map \\(\\lambda\\) Bradley–Terry \\(\\theta = \\lambda_i / (\\lambda_i + \\lambda_j)\\)","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/lambda_to_theta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map \\(\\lambda\\) to Bradley–Terry \\(\\theta = \\lambda_i / (\\lambda_i + \\lambda_j)\\) — lambda_to_theta","text":"","code":"lambda_to_theta(lambda)"},{"path":"https://laposanti.github.io/BTSBM/reference/lambda_to_theta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map \\(\\lambda\\) to Bradley–Terry \\(\\theta = \\lambda_i / (\\lambda_i + \\lambda_j)\\) — lambda_to_theta","text":"lambda Numeric vector positive rates \\(\\lambda_i\\).","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/lambda_to_theta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map \\(\\lambda\\) to Bradley–Terry \\(\\theta = \\lambda_i / (\\lambda_i + \\lambda_j)\\) — lambda_to_theta","text":"matrix entries \\(\\theta_{ij} = \\lambda_i / (\\lambda_i + \\lambda_j)\\). Diagonal 1/2 formula; may overwrite prefer NA diagonal.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/lambda_to_theta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map \\(\\lambda\\) to Bradley–Terry \\(\\theta = \\lambda_i / (\\lambda_i + \\lambda_j)\\) — lambda_to_theta","text":"","code":"lambda_to_theta(c(1,2,4)) #>           [,1]      [,2]      [,3] #> [1,] 0.5000000 0.3333333 0.2000000 #> [2,] 0.6666667 0.5000000 0.3333333 #> [3,] 0.8000000 0.6666667 0.5000000"},{"path":"https://laposanti.github.io/BTSBM/reference/make_bt_cluster_loo.html","id":null,"dir":"Reference","previous_headings":"","what":"Log-likelihood matrix for the BT–SBM (clustered) model — make_bt_cluster_loo","title":"Log-likelihood matrix for the BT–SBM (clustered) model — make_bt_cluster_loo","text":"Builds T_iter x D matrix log-likelihood values using cluster labels \\(x_i\\) cluster rates \\(\\lambda_k\\). Assumes x_samples lambda_samples relabelled consistently (e.g. via inference_helper). Builds \\(S \\times D\\) matrix using cluster labels \\(x_i\\) cluster rates \\(\\lambda_k\\). Assumes inputs relabelled consistently cluster ids x_samples[s, ] 1..K K = ncol(lambda_samples).","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/make_bt_cluster_loo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log-likelihood matrix for the BT–SBM (clustered) model — make_bt_cluster_loo","text":"","code":"make_bt_cluster_loo(w_ij, lambda_samples, x_samples)  make_bt_cluster_loo(w_ij, lambda_samples, x_samples)"},{"path":"https://laposanti.github.io/BTSBM/reference/make_bt_cluster_loo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log-likelihood matrix for the BT–SBM (clustered) model — make_bt_cluster_loo","text":"w_ij integer/numeric \\(n \\times n\\) wins (j). lambda_samples numeric \\(S \\times K\\) matrix cluster rates \\(\\lambda_k\\). x_samples integer \\(S \\times n\\) matrix cluster labels item.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/make_bt_cluster_loo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log-likelihood matrix for the BT–SBM (clustered) model — make_bt_cluster_loo","text":"list : ll — T_iter x D matrix log-likelihoods. obs_idx — D x 2 matrix (,j) indices defining column. list : ll — \\(S \\times D\\) matrix log-likelihoods. obs_idx — \\(D \\times 2\\) matrix (,j) indices defining column.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/make_bt_cluster_loo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Log-likelihood matrix for the BT–SBM (clustered) model — make_bt_cluster_loo","text":"","code":"if (FALSE) { # \\dontrun{ # After running your clustered sampler and relabeling: # ll_obj <- make_bt_cluster_loo(w, n, out$lambda_samples_relabel, out$x_samples_relabel) } # }"},{"path":"https://laposanti.github.io/BTSBM/reference/make_bt_loo_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Build BT clustered log-likelihood matrix (player-level) — make_bt_loo_cluster","title":"Build BT clustered log-likelihood matrix (player-level) — make_bt_loo_cluster","text":"Convenience alternative returning plain \\(S \\times D\\) matrix (\\(D\\) = #pairs <j). x_draws labels lambda_draws cluster rates per draw.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/make_bt_loo_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build BT clustered log-likelihood matrix (player-level) — make_bt_loo_cluster","text":"","code":"make_bt_loo_cluster(x_draws, lambda_draws, w_ij)"},{"path":"https://laposanti.github.io/BTSBM/reference/make_bt_loo_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build BT clustered log-likelihood matrix (player-level) — make_bt_loo_cluster","text":"x_draws integer \\(S \\times n\\) matrix cluster labels per draw. lambda_draws numeric \\(S \\times K\\) matrix cluster rates per draw. w_ij \\(n \\times n\\) pairwise wins matrix (j, diag = 0).","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/make_bt_loo_cluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build BT clustered log-likelihood matrix (player-level) — make_bt_loo_cluster","text":"Numeric matrix \\(S \\times D\\) log-likelihoods.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/make_bt_simple_loo.html","id":null,"dir":"Reference","previous_headings":"","what":"Log-likelihood matrix for the simple Bradley–Terry model — make_bt_simple_loo","title":"Log-likelihood matrix for the simple Bradley–Terry model — make_bt_simple_loo","text":"Builds T_iter x D matrix log-likelihood values, T_iter number posterior draws D number observed unordered pairs (<j) n_ij > 0. suitable input loo. Builds \\(S \\times D\\) matrix log-likelihood values, \\(S\\) number posterior draws \\(D\\) number observed unordered pairs (<j) \\(n_{ij} > 0\\).","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/make_bt_simple_loo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log-likelihood matrix for the simple Bradley–Terry model — make_bt_simple_loo","text":"","code":"make_bt_simple_loo(w_ij, lambda_samples)  make_bt_simple_loo(w_ij, lambda_samples)"},{"path":"https://laposanti.github.io/BTSBM/reference/make_bt_simple_loo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log-likelihood matrix for the simple Bradley–Terry model — make_bt_simple_loo","text":"w_ij integer/numeric \\(n \\times n\\) wins (j). lambda_samples numeric \\(S \\times n\\) matrix player-specific rates \\(\\lambda_i\\).","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/make_bt_simple_loo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log-likelihood matrix for the simple Bradley–Terry model — make_bt_simple_loo","text":"list : ll — T_iter x D matrix log-likelihoods. obs_idx — D x 2 matrix (,j) indices defining column. list : ll — \\(S \\times D\\) matrix log-likelihoods. obs_idx — \\(D \\times 2\\) matrix (,j) indices defining column.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/plot_assignment_probabilities.html","id":null,"dir":"Reference","previous_headings":"","what":"Assignment probability heatmap (BT-SBM) — plot_assignment_probabilities","title":"Assignment probability heatmap (BT-SBM) — plot_assignment_probabilities","text":"Heatmap item-wise posterior assignment probabilities clusters (relabeled Cluster 1 top block decreasing \\(\\lambda\\)). Items ordered probable cluster marginal wins.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/plot_assignment_probabilities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assignment probability heatmap (BT-SBM) — plot_assignment_probabilities","text":"","code":"plot_assignment_probabilities(   fit,   w_ij = NULL,   max_n_clust = NULL,   clean_fun = clean_players_names,   k_show = NULL,   fill_low = \"#FFFFCC\",   fill_high = \"#006400\" )"},{"path":"https://laposanti.github.io/BTSBM/reference/plot_assignment_probabilities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assignment probability heatmap (BT-SBM) — plot_assignment_probabilities","text":"fit Output list gibbs_BT_SBM() (must include relabeled$assign_prob). w_ij Optional wins matrix compute marginal wins ordering annotation. NULL, items ordered -probable cluster . max_n_clust filter mcmc x_t. specified use modal K clean_fun Optional function prettify names. Default: identity. k_show Optional integer number clusters show (defaults columns assign_prob). fill_low, fill_high Colors heatmap gradient low/high.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/plot_assignment_probabilities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assignment probability heatmap (BT-SBM) — plot_assignment_probabilities","text":"ggplot object.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/plot_assignment_probabilities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assignment probability heatmap (BT-SBM) — plot_assignment_probabilities","text":"","code":"if (FALSE) { # \\dontrun{ p <- plot_assignment_probabilities(fit, w_ij) } # }"},{"path":"https://laposanti.github.io/BTSBM/reference/plot_block_adjacency.html","id":null,"dir":"Reference","previous_headings":"","what":"Block-ordered adjacency heatmap (BT-SBM) — plot_block_adjacency","title":"Block-ordered adjacency heatmap (BT-SBM) — plot_block_adjacency","text":"Plot adjacency (wins / matches) heatmap rows/cols ordered hard partition (fit$estimates$x_hat) , within blocks, marginal wins. Draws block boundary lines (optionally) side color strip block IDs ggside installed.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/plot_block_adjacency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Block-ordered adjacency heatmap (BT-SBM) — plot_block_adjacency","text":"","code":"plot_block_adjacency(   fit,   w_ij,   x_hat = NULL,   clean_fun = clean_players_names,   palette = NULL,   fill_low = \"#FFFFCC\",   fill_high = \"#006400\" )"},{"path":"https://laposanti.github.io/BTSBM/reference/plot_block_adjacency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Block-ordered adjacency heatmap (BT-SBM) — plot_block_adjacency","text":"fit Output list gibbs_BT_SBM(). w_ij Integer matrix wins (players & order used fit). x_hat partition point estimate. One n-length integer vector. clean_fun Optional function prettify player names. Default: identity. palette Named colors blocks (character vector). Defaults Wimbledon-ish palette. fill_low, fill_high Colors heatmap pixels gradient low/high.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/plot_block_adjacency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Block-ordered adjacency heatmap (BT-SBM) — plot_block_adjacency","text":"ggplot object.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/plot_block_adjacency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Block-ordered adjacency heatmap (BT-SBM) — plot_block_adjacency","text":"","code":"if (FALSE) { # \\dontrun{ p <- plot_block_adjacency(fit, w_ij) } # }"},{"path":"https://laposanti.github.io/BTSBM/reference/plot_lambda_uncertainty.html","id":null,"dir":"Reference","previous_headings":"","what":"Lambda uncertainty plot (per player) — plot_lambda_uncertainty","title":"Lambda uncertainty plot (per player) — plot_lambda_uncertainty","text":"Forest plot per-player posterior \\(\\lambda\\) uncertainty intervals, using relabeled draws. Points colored hard partition (fit$estimates$x_hat).","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/plot_lambda_uncertainty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lambda uncertainty plot (per player) — plot_lambda_uncertainty","text":"","code":"plot_lambda_uncertainty(   fit,   w_ij,   log_base = 10,   max_n_clust = NULL,   prob = 0.9,   palette = c(`0` = \"#FFFFFF\", `1` = \"#CDEB8B\", `2` = \"#78AB46\", `3` = \"#FFD700\", `4` =     \"#FF8C00\", `5` = \"#00441B\"),   clean_fun = clean_players_names )"},{"path":"https://laposanti.github.io/BTSBM/reference/plot_lambda_uncertainty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lambda uncertainty plot (per player) — plot_lambda_uncertainty","text":"fit Output gibbs_BT_SBM() opt_lambda$lambda_item computed (set keep_lambda=TRUE sampling). w_ij Optional wins matrix compute marginal wins ordering annotation. log_base Base x-axis logarithm (10 e). Defaults 10. max_n_clust filter mcmc x_t. specified use modal K prob Interval probability HPD (e.g., 0.90). palette Named colors clusters. clean_fun Optional player-name cleaner. Default: identity.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/plot_lambda_uncertainty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lambda uncertainty plot (per player) — plot_lambda_uncertainty","text":"ggplot object.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/plot_lambda_uncertainty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lambda uncertainty plot (per player) — plot_lambda_uncertainty","text":"","code":"if (FALSE) { # \\dontrun{ # fit with keep_lambda=TRUE p <- plot_lambda_uncertainty(fit, prob = 0.90) } # }"},{"path":"https://laposanti.github.io/BTSBM/reference/pretty_table_K_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a block-count posterior distribution as a pretty- table — pretty_table_K_distribution","title":"Format a block-count posterior distribution as a pretty- table — pretty_table_K_distribution","text":"Given output relabel_by_lambda, function produces pretty table posterior distribution K, number blocks induced partition x. formats result knitr::kable kableExtra::kable_styling.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/pretty_table_K_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a block-count posterior distribution as a pretty- table — pretty_table_K_distribution","text":"","code":"pretty_table_K_distribution(   post,   format = \"html\",   p_min = 0.05,   digits = 3,   latex_options = c(\"striped\", \"hold_position\") )"},{"path":"https://laposanti.github.io/BTSBM/reference/pretty_table_K_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a block-count posterior distribution as a pretty- table — pretty_table_K_distribution","text":"post output relabel_by_lambda() format Character string. format output table. Default \"html\". Switch \"latex\" document-ready table. p_min Numeric scalar. Probabilities \\(\\le\\) threshold dropped pivoting. Defaults 0.05. digits Integer passed knitr::kable rounding. Defaults 3. latex_options Character vector LaTeX options passed kableExtra::kable_styling. Defaults c(\"striped\",\"hold_position\").","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/pretty_table_K_distribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a block-count posterior distribution as a pretty- table — pretty_table_K_distribution","text":"kableExtra / knitr_kable object (suitable LaTeX HTML, depending format).","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/pretty_table_K_distribution.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format a block-count posterior distribution as a pretty- table — pretty_table_K_distribution","text":"function produces pretty table posterior distribution K, number blocks induced partition x. filters clusters p(K > p_min).","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/relabel_by_lambda.html","id":null,"dir":"Reference","previous_headings":"","what":"Relabel partitions by decreasing \\(\\lambda\\), compute point estimates, and quantify uncertainty via credible balls — relabel_by_lambda","title":"Relabel partitions by decreasing \\(\\lambda\\), compute point estimates, and quantify uncertainty via credible balls — relabel_by_lambda","text":"Given posterior samples labels x_samples (S x N) corresponding cluster-level intensities lambda_samples per iteration, function: () relabels draw cluster 1 largest \\(\\lambda\\), cluster 2 second largest, etc.; (ii) computes posterior similarity matrix (PSM) partition point estimates (minVI Binder); (iii) constructs VI-credible ball around minVI partition returns extremal partitions surface (lower/upper), relabelled decreasing strength interpretability. also returns per-item assignment probabilities posterior distribution number clusters.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/relabel_by_lambda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relabel partitions by decreasing \\(\\lambda\\), compute point estimates, and quantify uncertainty via credible balls — relabel_by_lambda","text":"","code":"relabel_by_lambda(x_samples, lambda_samples)"},{"path":"https://laposanti.github.io/BTSBM/reference/relabel_by_lambda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relabel partitions by decreasing \\(\\lambda\\), compute point estimates, and quantify uncertainty via credible balls — relabel_by_lambda","text":"x_samples Integer matrix (S x N) sampled partitions; rows index MCMC iterations columns index items. Cluster labels arbitrary across iterations. lambda_samples Either: list length S; element [[s]] numeric vector cluster intensities \\(\\lambda_\\ell\\) indexed raw label id used iteration s (NAs allowed non-occupied ids), matrix (S x L) whose row s gives \\(\\lambda_\\ell\\) label \\(\\ell\\) iteration s (sparse columns NAs permitted).","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/relabel_by_lambda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Relabel partitions by decreasing \\(\\lambda\\), compute point estimates, and quantify uncertainty via credible balls — relabel_by_lambda","text":"named list components: x_samples_relabel Integer matrix (S x N) relabelled draws (labels 1..K_s per iteration s, ordered decreasing \\(\\lambda\\)). lambda_samples_relabel Numeric matrix (S x N) assigning item cluster's \\(\\lambda\\) relabelling. co_clustering Posterior similarity matrix (N x N). minVI_partition Partition estimated minimizing posterior expected VI (first solution returned mcclust.ext::minVI). partition_binder Partition estimated Binder's loss (mcclust.ext::minbinder.ext). credible_ball_lower_partition Partition surface 95\\ posterior-mean item strength). credible_ball_upper_partition Analogous extremal partition credible-ball surface (relabelled). K_VI_lower Number clusters credible_ball_lower_partition. K_VI_upper Number clusters credible_ball_upper_partition. n_clusters_each_iter Integer vector (length S) occupied cluster counts per iteration. block_count_distribution Data frame columns num_blocks, count, prob summarizing posterior number clusters. item_cluster_assignment_probs Data frame (N x Kmax) per-item marginal assignment probabilities (columns Cluster_1, Cluster_2, ...). avg_top_block_count Average size top-\\(\\lambda\\) cluster across iterations. top_block_count_per_iter Integer vector (length S) size top-\\(\\lambda\\) cluster per iteration. cluster_lambda_ordered List length S; element vector cluster \\(\\lambda\\) values iteration, ordered decreasingly.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/relabel_by_lambda.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Relabel partitions by decreasing \\(\\lambda\\), compute point estimates, and quantify uncertainty via credible balls — relabel_by_lambda","text":"Relabelling. iteration, occupied labels compacted 1..K_s reordered decreasing \\(\\lambda\\), producing canonical “1 = strongest” labelling. Point estimation. posterior similarity matrix computed relabelled draws; minVI Binder partitions obtained via mcclust.ext. Credible ball extremal partitions. 95\\ (VI) constructed around minVI partition. report extreme partitions ball's surface (sense maximal VI distance centre), returned mcclust.ext::credibleball. relabelled decreasing posterior-mean item strength ensure consistent “strength ordering” across summaries. associated cluster counts K_VI_lower K_VI_upper characterize local structural uncertainty around point estimate; marginal posterior quantiles \\(K\\).","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/relabel_by_lambda.html","id":"input-requirements","dir":"Reference","previous_headings":"","what":"Input requirements","title":"Relabel partitions by decreasing \\(\\lambda\\), compute point estimates, and quantify uncertainty via credible balls — relabel_by_lambda","text":"x_samples must integer-valued missing items per row. lambda_samples may sparse (NAs non-occupied labels). mcclust mcclust.ext must available; credibleball expected return lower/upper partitions either c.lower/c.upper c.lowervert/c.uppervert.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/relabel_by_lambda.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Relabel partitions by decreasing \\(\\lambda\\), compute point estimates, and quantify uncertainty via credible balls — relabel_by_lambda","text":"Wade, S., 2023. Bayesian cluster analysis. Philosophical Transactions Royal Society : Mathematical, Physical Engineering Sciences 381, 20220149. https://doi.org/10.1098/rsta.2022.0149","code":""},{"path":[]},{"path":"https://laposanti.github.io/BTSBM/reference/relabel_by_lambda.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Relabel partitions by decreasing \\(\\lambda\\), compute point estimates, and quantify uncertainty via credible balls — relabel_by_lambda","text":"","code":"if (FALSE) { # \\dontrun{ set.seed(42) S <- 50; N <- 15 x_samps <- matrix(sample(1:4, S*N, TRUE), S, N) # Sparse lambda per-iter: labels up to 6, only first 4 occupied typically lam_list <- replicate(S, { v <- rep(NA_real_, 6); v[1:4] <- rexp(4, 1); v }, simplify = FALSE) out <- relabel_by_lambda(x_samps, lam_list) out$minVI_partition[1:10] out$K_VI_lower; out$K_VI_upper } # }"},{"path":"https://laposanti.github.io/BTSBM/reference/sample_from_BTSBM.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample a Bradley–Terry Stochastic Block Model (BT-SBM) tournament — sample_from_BTSBM","title":"Sample a Bradley–Terry Stochastic Block Model (BT-SBM) tournament — sample_from_BTSBM","text":"Generates sparse undirected match matrix \\(N\\) corresponding directed win counts matrix \\(W\\) BTSBM generating process. Block strengths specified via positive vector \\(\\lambda\\), mapped pairwise win probabilities \\(\\theta_{ab} = \\lambda_a / (\\lambda_a + \\lambda_b)\\).","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/sample_from_BTSBM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample a Bradley–Terry Stochastic Block Model (BT-SBM) tournament — sample_from_BTSBM","text":"","code":"sample_from_BTSBM(   n_players,   K,   x = NULL,   mean_matches = 5,   p_edge = 0.5,   lambda = NULL,   lambda_base = 0.08,   lambda_ratio = 2.3,   reverse_lambda = TRUE,   seed = NULL )"},{"path":"https://laposanti.github.io/BTSBM/reference/sample_from_BTSBM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample a Bradley–Terry Stochastic Block Model (BT-SBM) tournament — sample_from_BTSBM","text":"n_players Integer. Number players \\(n\\). K Integer. Number blocks. x Optional integer vector length n_players values 1:K. NULL, uses rep(seq_len(K), length.= n_players). mean_matches Positive numeric. Poisson mean match counts present edges. p_edge Numeric [0,1]. Probability unordered pair present topology. lambda Optional positive numeric vector length K. NULL, geometric sequence used: lambda_base * lambda_ratio^(0:(K-1)). lambda_base Positive numeric. Base geometric schedule lambda provided. Default 0.08 (snippet). lambda_ratio Positive numeric. Ratio geometric schedule lambda provided. Default 2.3 (snippet). reverse_lambda Logical. TRUE, uses rev(lambda) computing theta, matching theta_star <- lambda_to_theta(rev(lambda_star)). seed Optional integer. provided, sets RNG seed reproducibility within function call.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/sample_from_BTSBM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample a Bradley–Terry Stochastic Block Model (BT-SBM) tournament — sample_from_BTSBM","text":"list components: N — \\(n \\times n\\) integer matrix symmetric match counts zero diagonal. W — \\(n \\times n\\) integer matrix directed win counts w[, j] + w[j, ] = N[, j]. x — integer vector block labels 1:K. lambda — numeric vector length K used build theta. theta — \\(K \\times K\\) matrix entries \\(\\theta_{ab} = \\lambda_a / (\\lambda_a + \\lambda_b)\\).","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/sample_from_BTSBM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample a Bradley–Terry Stochastic Block Model (BT-SBM) tournament — sample_from_BTSBM","text":"workflow : Sample symmetric match-count matrix \\(N\\) first drawing random subset unordered pairs probability p_edge, assigning selected pair Poisson\\((mean\\_matches)\\) number matches. Compute block--block Bradley–Terry matrix \\(\\theta = \\lambda \\mathbf{1}^\\top / (\\lambda \\mathbf{1}^\\top + \\mathbf{1}\\lambda^\\top)\\). unordered pair \\(N_{ij}>0\\), draw \\(w_{ij} \\sim \\text{Binomial}(N_{ij}, \\theta_{x_i, x_j})\\) set \\(w_{ji} = N_{ij} - w_{ij}\\). default, block labels assigned deterministically rep(seq_len(K), length.= n_players) mirror example, can pass custom label vector via x.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/shannon_entropy.html","id":null,"dir":"Reference","previous_headings":"","what":"Shannon entropy (nats) — shannon_entropy","title":"Shannon entropy (nats) — shannon_entropy","text":"Shannon entropy (nats)","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/shannon_entropy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shannon entropy (nats) — shannon_entropy","text":"","code":"shannon_entropy(p)"},{"path":"https://laposanti.github.io/BTSBM/reference/shannon_entropy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shannon entropy (nats) — shannon_entropy","text":"p numeric vector nonnegative masses.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/shannon_entropy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shannon entropy (nats) — shannon_entropy","text":"numeric(1) entropy nats.","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/updateZ_and_rowsums.html","id":null,"dir":"Reference","previous_headings":"","what":"@keywords internal — updateZ_and_rowsums","title":"@keywords internal — updateZ_and_rowsums","text":"@keywords internal","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/updateZ_and_rowsums.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"@keywords internal — updateZ_and_rowsums","text":"","code":"updateZ_and_rowsums(n_ij, x, lambda)"},{"path":"https://laposanti.github.io/BTSBM/reference/urn_DM.html","id":null,"dir":"Reference","previous_headings":"","what":"Urn weight: Dirichlet–Multinomial with finite cap K_DM — urn_DM","title":"Urn weight: Dirichlet–Multinomial with finite cap K_DM — urn_DM","text":"Urn weight: Dirichlet–Multinomial finite cap K_DM","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/urn_DM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Urn weight: Dirichlet–Multinomial with finite cap K_DM — urn_DM","text":"","code":"urn_DM(v_minus, beta_DM, K_DM)"},{"path":"https://laposanti.github.io/BTSBM/reference/urn_DM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Urn weight: Dirichlet–Multinomial with finite cap K_DM — urn_DM","text":"v_minus integer sizes occupied clusters (excluding focal item). beta_DM numeric concentration (>0). K_DM integer maximum number clusters (>=1).","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/urn_DM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Urn weight: Dirichlet–Multinomial with finite cap K_DM — urn_DM","text":"Numeric vector length \\(K+1\\): existing weights new-cluster mass. #' @references Legramanti, S., Rigon, T., Durante, D., Dunson, D.B., 2022. Extended stochastic block models application criminal networks. Annals Applied Statistics 16. https://doi.org/10.1214/21-aoas1595","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/urn_DP.html","id":null,"dir":"Reference","previous_headings":"","what":"Urn weight: Dirichlet Process — urn_DP","title":"Urn weight: Dirichlet Process — urn_DP","text":"Urn weight: Dirichlet Process","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/urn_DP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Urn weight: Dirichlet Process — urn_DP","text":"","code":"urn_DP(v_minus, alpha_PY)"},{"path":"https://laposanti.github.io/BTSBM/reference/urn_DP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Urn weight: Dirichlet Process — urn_DP","text":"v_minus integer sizes occupied clusters (excluding focal item). alpha_PY numeric concentration (>0).","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/urn_DP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Urn weight: Dirichlet Process — urn_DP","text":"Numeric vector length \\(K+1\\): existing weights new-cluster mass. #' @references Legramanti, S., Rigon, T., Durante, D., Dunson, D.B., 2022. Extended stochastic block models application criminal networks. Annals Applied Statistics 16. https://doi.org/10.1214/21-aoas1595","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/urn_GN.html","id":null,"dir":"Reference","previous_headings":"","what":"Urn weight: Gnedin heuristic — urn_GN","title":"Urn weight: Gnedin heuristic — urn_GN","text":"Urn weight: Gnedin heuristic","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/urn_GN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Urn weight: Gnedin heuristic — urn_GN","text":"","code":"urn_GN(v_minus, gamma)"},{"path":"https://laposanti.github.io/BTSBM/reference/urn_GN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Urn weight: Gnedin heuristic — urn_GN","text":"v_minus integer sizes occupied clusters (excluding focal item). gamma numeric parameter (>0).","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/urn_GN.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Urn weight: Gnedin heuristic — urn_GN","text":"Numeric vector length \\(K+1\\). #' @references Legramanti, S., Rigon, T., Durante, D., Dunson, D.B., 2022. Extended stochastic block models application criminal networks. Annals Applied Statistics 16. https://doi.org/10.1214/21-aoas1595","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/urn_PY.html","id":null,"dir":"Reference","previous_headings":"","what":"Urn weight: Pitman–Yor process — urn_PY","title":"Urn weight: Pitman–Yor process — urn_PY","text":"Urn weight: Pitman–Yor process","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/urn_PY.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Urn weight: Pitman–Yor process — urn_PY","text":"","code":"urn_PY(v_minus, alpha_PY, sigma_PY)"},{"path":"https://laposanti.github.io/BTSBM/reference/urn_PY.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Urn weight: Pitman–Yor process — urn_PY","text":"v_minus integer sizes occupied clusters (excluding focal item). alpha_PY numeric concentration (> -sigma_PY). sigma_PY numeric discount [0,1).","code":""},{"path":"https://laposanti.github.io/BTSBM/reference/urn_PY.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Urn weight: Pitman–Yor process — urn_PY","text":"Numeric vector length \\(K+1\\). #' @references Legramanti, S., Rigon, T., Durante, D., Dunson, D.B., 2022. Extended stochastic block models application criminal networks. Annals Applied Statistics 16. https://doi.org/10.1214/21-aoas1595","code":""}]
